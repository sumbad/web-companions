(()=>{"use strict";var __webpack_modules__={216:(__unused_webpack_module,__unused_webpack___webpack_exports__,__webpack_require__)=>{eval('\n;// CONCATENATED MODULE: ./node_modules/lit-html/lit-html.js\n/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nvar t;const i=window,s=i.trustedTypes,e=s?s.createPolicy("lit-html",{createHTML:t=>t}):void 0,o="$lit$",n=`lit$${(Math.random()+"").slice(9)}$`,l="?"+n,h=`<${l}>`,r=document,u=()=>r.createComment(""),d=t=>null===t||"object"!=typeof t&&"function"!=typeof t,c=Array.isArray,v=t=>c(t)||"function"==typeof(null==t?void 0:t[Symbol.iterator]),a="[ \\t\\n\\f\\r]",f=/<(?:(!--|\\/[^a-zA-Z])|(\\/?[a-zA-Z][^>\\s]*)|(\\/?$))/g,_=/--\x3e/g,m=/>/g,p=RegExp(`>|${a}(?:([^\\\\s"\'>=/]+)(${a}*=${a}*(?:[^ \\t\\n\\f\\r"\'\\`<>=]|("|\')|))|$)`,"g"),g=/\'/g,$=/"/g,y=/^(?:script|style|textarea|title)$/i,w=t=>(i,...s)=>({_$litType$:t,strings:i,values:s}),x=w(1),b=w(2),T=Symbol.for("lit-noChange"),A=Symbol.for("lit-nothing"),E=new WeakMap,C=r.createTreeWalker(r,129,null,!1);function P(t,i){if(!Array.isArray(t)||!t.hasOwnProperty("raw"))throw Error("invalid template strings array");return void 0!==e?e.createHTML(i):i}const V=(t,i)=>{const s=t.length-1,e=[];let l,r=2===i?"<svg>":"",u=f;for(let i=0;i<s;i++){const s=t[i];let d,c,v=-1,a=0;for(;a<s.length&&(u.lastIndex=a,c=u.exec(s),null!==c);)a=u.lastIndex,u===f?"!--"===c[1]?u=_:void 0!==c[1]?u=m:void 0!==c[2]?(y.test(c[2])&&(l=RegExp("</"+c[2],"g")),u=p):void 0!==c[3]&&(u=p):u===p?">"===c[0]?(u=null!=l?l:f,v=-1):void 0===c[1]?v=-2:(v=u.lastIndex-c[2].length,d=c[1],u=void 0===c[3]?p:\'"\'===c[3]?$:g):u===$||u===g?u=p:u===_||u===m?u=f:(u=p,l=void 0);const w=u===p&&t[i+1].startsWith("/>")?" ":"";r+=u===f?s+h:v>=0?(e.push(d),s.slice(0,v)+o+s.slice(v)+n+w):s+n+(-2===v?(e.push(void 0),i):w)}return[P(t,r+(t[s]||"<?>")+(2===i?"</svg>":"")),e]};class N{constructor({strings:t,_$litType$:i},e){let h;this.parts=[];let r=0,d=0;const c=t.length-1,v=this.parts,[a,f]=V(t,i);if(this.el=N.createElement(a,e),C.currentNode=this.el.content,2===i){const t=this.el.content,i=t.firstChild;i.remove(),t.append(...i.childNodes)}for(;null!==(h=C.nextNode())&&v.length<c;){if(1===h.nodeType){if(h.hasAttributes()){const t=[];for(const i of h.getAttributeNames())if(i.endsWith(o)||i.startsWith(n)){const s=f[d++];if(t.push(i),void 0!==s){const t=h.getAttribute(s.toLowerCase()+o).split(n),i=/([.?@])?(.*)/.exec(s);v.push({type:1,index:r,name:i[2],strings:t,ctor:"."===i[1]?H:"?"===i[1]?L:"@"===i[1]?z:k})}else v.push({type:6,index:r})}for(const i of t)h.removeAttribute(i)}if(y.test(h.tagName)){const t=h.textContent.split(n),i=t.length-1;if(i>0){h.textContent=s?s.emptyScript:"";for(let s=0;s<i;s++)h.append(t[s],u()),C.nextNode(),v.push({type:2,index:++r});h.append(t[i],u())}}}else if(8===h.nodeType)if(h.data===l)v.push({type:2,index:r});else{let t=-1;for(;-1!==(t=h.data.indexOf(n,t+1));)v.push({type:7,index:r}),t+=n.length-1}r++}}static createElement(t,i){const s=r.createElement("template");return s.innerHTML=t,s}}function S(t,i,s=t,e){var o,n,l,h;if(i===T)return i;let r=void 0!==e?null===(o=s._$Co)||void 0===o?void 0:o[e]:s._$Cl;const u=d(i)?void 0:i._$litDirective$;return(null==r?void 0:r.constructor)!==u&&(null===(n=null==r?void 0:r._$AO)||void 0===n||n.call(r,!1),void 0===u?r=void 0:(r=new u(t),r._$AT(t,s,e)),void 0!==e?(null!==(l=(h=s)._$Co)&&void 0!==l?l:h._$Co=[])[e]=r:s._$Cl=r),void 0!==r&&(i=S(t,r._$AS(t,i.values),r,e)),i}class M{constructor(t,i){this._$AV=[],this._$AN=void 0,this._$AD=t,this._$AM=i}get parentNode(){return this._$AM.parentNode}get _$AU(){return this._$AM._$AU}u(t){var i;const{el:{content:s},parts:e}=this._$AD,o=(null!==(i=null==t?void 0:t.creationScope)&&void 0!==i?i:r).importNode(s,!0);C.currentNode=o;let n=C.nextNode(),l=0,h=0,u=e[0];for(;void 0!==u;){if(l===u.index){let i;2===u.type?i=new R(n,n.nextSibling,this,t):1===u.type?i=new u.ctor(n,u.name,u.strings,this,t):6===u.type&&(i=new Z(n,this,t)),this._$AV.push(i),u=e[++h]}l!==(null==u?void 0:u.index)&&(n=C.nextNode(),l++)}return C.currentNode=r,o}v(t){let i=0;for(const s of this._$AV)void 0!==s&&(void 0!==s.strings?(s._$AI(t,s,i),i+=s.strings.length-2):s._$AI(t[i])),i++}}class R{constructor(t,i,s,e){var o;this.type=2,this._$AH=A,this._$AN=void 0,this._$AA=t,this._$AB=i,this._$AM=s,this.options=e,this._$Cp=null===(o=null==e?void 0:e.isConnected)||void 0===o||o}get _$AU(){var t,i;return null!==(i=null===(t=this._$AM)||void 0===t?void 0:t._$AU)&&void 0!==i?i:this._$Cp}get parentNode(){let t=this._$AA.parentNode;const i=this._$AM;return void 0!==i&&11===(null==t?void 0:t.nodeType)&&(t=i.parentNode),t}get startNode(){return this._$AA}get endNode(){return this._$AB}_$AI(t,i=this){t=S(this,t,i),d(t)?t===A||null==t||""===t?(this._$AH!==A&&this._$AR(),this._$AH=A):t!==this._$AH&&t!==T&&this._(t):void 0!==t._$litType$?this.g(t):void 0!==t.nodeType?this.$(t):v(t)?this.T(t):this._(t)}k(t){return this._$AA.parentNode.insertBefore(t,this._$AB)}$(t){this._$AH!==t&&(this._$AR(),this._$AH=this.k(t))}_(t){this._$AH!==A&&d(this._$AH)?this._$AA.nextSibling.data=t:this.$(r.createTextNode(t)),this._$AH=t}g(t){var i;const{values:s,_$litType$:e}=t,o="number"==typeof e?this._$AC(t):(void 0===e.el&&(e.el=N.createElement(P(e.h,e.h[0]),this.options)),e);if((null===(i=this._$AH)||void 0===i?void 0:i._$AD)===o)this._$AH.v(s);else{const t=new M(o,this),i=t.u(this.options);t.v(s),this.$(i),this._$AH=t}}_$AC(t){let i=E.get(t.strings);return void 0===i&&E.set(t.strings,i=new N(t)),i}T(t){c(this._$AH)||(this._$AH=[],this._$AR());const i=this._$AH;let s,e=0;for(const o of t)e===i.length?i.push(s=new R(this.k(u()),this.k(u()),this,this.options)):s=i[e],s._$AI(o),e++;e<i.length&&(this._$AR(s&&s._$AB.nextSibling,e),i.length=e)}_$AR(t=this._$AA.nextSibling,i){var s;for(null===(s=this._$AP)||void 0===s||s.call(this,!1,!0,i);t&&t!==this._$AB;){const i=t.nextSibling;t.remove(),t=i}}setConnected(t){var i;void 0===this._$AM&&(this._$Cp=t,null===(i=this._$AP)||void 0===i||i.call(this,t))}}class k{constructor(t,i,s,e,o){this.type=1,this._$AH=A,this._$AN=void 0,this.element=t,this.name=i,this._$AM=e,this.options=o,s.length>2||""!==s[0]||""!==s[1]?(this._$AH=Array(s.length-1).fill(new String),this.strings=s):this._$AH=A}get tagName(){return this.element.tagName}get _$AU(){return this._$AM._$AU}_$AI(t,i=this,s,e){const o=this.strings;let n=!1;if(void 0===o)t=S(this,t,i,0),n=!d(t)||t!==this._$AH&&t!==T,n&&(this._$AH=t);else{const e=t;let l,h;for(t=o[0],l=0;l<o.length-1;l++)h=S(this,e[s+l],i,l),h===T&&(h=this._$AH[l]),n||(n=!d(h)||h!==this._$AH[l]),h===A?t=A:t!==A&&(t+=(null!=h?h:"")+o[l+1]),this._$AH[l]=h}n&&!e&&this.j(t)}j(t){t===A?this.element.removeAttribute(this.name):this.element.setAttribute(this.name,null!=t?t:"")}}class H extends k{constructor(){super(...arguments),this.type=3}j(t){this.element[this.name]=t===A?void 0:t}}const I=s?s.emptyScript:"";class L extends k{constructor(){super(...arguments),this.type=4}j(t){t&&t!==A?this.element.setAttribute(this.name,I):this.element.removeAttribute(this.name)}}class z extends k{constructor(t,i,s,e,o){super(t,i,s,e,o),this.type=5}_$AI(t,i=this){var s;if((t=null!==(s=S(this,t,i,0))&&void 0!==s?s:A)===T)return;const e=this._$AH,o=t===A&&e!==A||t.capture!==e.capture||t.once!==e.once||t.passive!==e.passive,n=t!==A&&(e===A||o);o&&this.element.removeEventListener(this.name,this,e),n&&this.element.addEventListener(this.name,this,t),this._$AH=t}handleEvent(t){var i,s;"function"==typeof this._$AH?this._$AH.call(null!==(s=null===(i=this.options)||void 0===i?void 0:i.host)&&void 0!==s?s:this.element,t):this._$AH.handleEvent(t)}}class Z{constructor(t,i,s){this.element=t,this.type=6,this._$AN=void 0,this._$AM=i,this.options=s}get _$AU(){return this._$AM._$AU}_$AI(t){S(this,t)}}const j={O:o,P:n,A:l,C:1,M:V,L:M,D:v,R:S,I:R,V:k,H:L,N:z,U:H,F:Z},B=i.litHtmlPolyfillSupport;null==B||B(N,R),(null!==(t=i.litHtmlVersions)&&void 0!==t?t:i.litHtmlVersions=[]).push("2.7.5");const D=(t,i,s)=>{var e,o;const n=null!==(e=null==s?void 0:s.renderBefore)&&void 0!==e?e:i;let l=n._$litPart$;if(void 0===l){const t=null!==(o=null==s?void 0:s.renderBefore)&&void 0!==o?o:null;n._$litPart$=l=new R(i.insertBefore(u(),t),t,void 0,null!=s?s:{})}return l._$AI(t),l};\n//# sourceMappingURL=lit-html.js.map\n\n;// CONCATENATED MODULE: ./packages/lit/node_modules/@web-companions/gfc/lib/utils/p.js\nfunction p_setProp(key, value) {\n    if (!this.isConnected) {\n        this.props[key] = value;\n        return;\n    }\n    if (value !== this.props[key]) {\n        this[\'__stash__\'] = {\n            ...this[\'__stash__\'],\n            [key]: value,\n        };\n    }\n    Promise.resolve({\n        then: () => {\n            let stash = this[\'__stash__\'];\n            if (stash != null) {\n                this.props = {\n                    ...this.props,\n                    ...stash,\n                };\n                stash = null;\n            }\n        },\n    });\n}\nconst p_p = {\n    req(attribute) {\n        return {\n            type: {},\n            attribute,\n        };\n    },\n    opt(attribute) {\n        return {\n            type: {},\n            attribute,\n            optional: true,\n        };\n    },\n};\n//# sourceMappingURL=p.js.map\n;// CONCATENATED MODULE: ./packages/lit/node_modules/@web-companions/gfc/lib/EG.js\nvar __setFunctionName = (undefined && undefined.__setFunctionName) || function (f, name, prefix) {\n    if (typeof name === "symbol") name = name.description ? "[".concat(name.description, "]") : "";\n    return Object.defineProperty(f, "name", { configurable: true, value: prefix ? "".concat(prefix, " ", name) : name });\n};\n\nlet actualEl = undefined;\nfunction EG_EG(config) {\n    return (func) => {\n        const constructor = build(func, (config === null || config === void 0 ? void 0 : config.props) || {}, config === null || config === void 0 ? void 0 : config.mapper, this === null || this === void 0 ? void 0 : this.getRenderFn().element);\n        return (name, options) => {\n            try {\n                customElements.define(name, constructor, options);\n            }\n            catch (e) {\n                console.warn(e);\n            }\n            const component = function (_props) {\n                if (new.target != null) {\n                    return new constructor();\n                }\n                else {\n                    return customElements.whenDefined(name).then(() => customElements.get(name));\n                }\n            };\n            component.adapter = (func, defaultProps) => func(name, defaultProps);\n            return component;\n        };\n    };\n}\nfunction build(func, props, mapper = p_setProp, render = (result) => result.value) {\n    var _a;\n    const customEl = (_a = class extends HTMLElement {\n            static get observedAttributes() {\n                return Object.values(this.attributes);\n            }\n            set props(newProps) {\n                if (newProps !== undefined && this.props !== newProps) {\n                    this._props = newProps;\n                    this.next();\n                }\n            }\n            get props() {\n                return this._props;\n            }\n            async next(props) {\n                this.props = props || this.props;\n                if (!this.isScheduledNext && this.generation != null) {\n                    this.isScheduledNext = true;\n                    const generator = await Promise.resolve(this.generation);\n                    this.isScheduledNext = false;\n                    actualEl = this;\n                    render.call(this, generator.next(this.props));\n                }\n            }\n            constructor() {\n                super();\n                this.container = this;\n                this._props = {};\n                this.isScheduledNext = false;\n                for (const pK in props) {\n                    const pV = props[pK];\n                    let attr = undefined;\n                    if (\'type\' in pV) {\n                        attr = pV.attribute;\n                    }\n                    Reflect.defineProperty(this, pK, {\n                        get: () => {\n                            return this.props[pK];\n                        },\n                        set: (value) => {\n                            mapper.apply(this, [pK, value, attr]);\n                        },\n                        enumerable: true,\n                    });\n                }\n            }\n            connectedCallback() {\n                this.generation = func.call(this, this.props);\n                actualEl = this;\n                render.call(this, this.generation.next(this.props));\n            }\n            attributeChangedCallback(name, oldValue, newValue) {\n                if (oldValue !== newValue) {\n                    for (const [attrKey, attrName] of Object.entries(this.constructor[\'attributes\'])) {\n                        if (attrName === name && this[attrKey] !== newValue) {\n                            this[attrKey] = newValue;\n                            break;\n                        }\n                    }\n                }\n            }\n            disconnectedCallback() {\n                var _a;\n                (_a = this.generation) === null || _a === void 0 ? void 0 : _a.return();\n            }\n        },\n        __setFunctionName(_a, "customEl"),\n        _a.attributes = {},\n        _a);\n    const attrKey = \'attributes\';\n    const attributes = Reflect.get(customEl, attrKey);\n    for (const pK in props) {\n        const pV = props[pK];\n        if (\'type\' in pV && pV.attribute !== undefined) {\n            Reflect.defineProperty(customEl, attrKey, {\n                value: {\n                    ...attributes,\n                    [pK]: pV.attribute,\n                },\n                enumerable: true,\n                writable: true,\n            });\n        }\n    }\n    return customEl;\n}\nfunction EG_setElNode(nodesSymbol, key) {\n    let node = { current: null };\n    if (actualEl == null) {\n        return node;\n    }\n    if (actualEl[nodesSymbol] == null) {\n        actualEl[nodesSymbol] = {};\n    }\n    const nodes = actualEl[nodesSymbol];\n    if (nodes[key] == null) {\n        nodes[key] = node;\n    }\n    node = nodes[key];\n    return node;\n}\n//# sourceMappingURL=EG.js.map\n;// CONCATENATED MODULE: ./packages/lit/node_modules/@web-companions/gfc/lib/NG.js\n\nconst ref2Node = new WeakMap();\nfunction NG_NG(func) {\n    var _a;\n    const render = (_a = this === null || this === void 0 ? void 0 : this.getRenderFn().node) !== null && _a !== void 0 ? _a : ((result) => result.value);\n    return (ref = { current: null }) => {\n        const nodesSymbol = Symbol(\'nodes\');\n        return (props = {}) => {\n            const _ref = props.key != null ? EG_setElNode(nodesSymbol, props.key) : ref;\n            let node = ref2Node.get(_ref);\n            if (node == null) {\n                const _node = {\n                    ..._ref,\n                    props,\n                    isScheduledNext: false,\n                };\n                const generator = Reflect.apply(func, _node, [props]);\n                _node.generator = generator;\n                _node.next = async function (_props) {\n                    this.props = _props || this.props;\n                    if (!this.isScheduledNext) {\n                        this.isScheduledNext = true;\n                        const g = await Promise.resolve(generator);\n                        this.isScheduledNext = false;\n                        this.value = render.call({ container: this }, g.next(this.props));\n                    }\n                };\n                node = _node;\n                ref2Node.set(_ref, node);\n            }\n            node.props = props;\n            node.value = render.call({ container: node }, node.generator.next(props));\n            return node.value;\n        };\n    };\n}\n//# sourceMappingURL=NG.js.map\n;// CONCATENATED MODULE: ./packages/lit/node_modules/@web-companions/gfc/lib/View.js\n\n\nclass View {\n    constructor(_render) {\n        this._render = _render;\n        this.element = EG_EG;\n        this.node = NG_NG;\n    }\n    getRenderFn() {\n        return this._render;\n    }\n}\n//# sourceMappingURL=View.js.map\n;// CONCATENATED MODULE: ./packages/lit/node_modules/@web-companions/gfc/lib/index.js\n\n\n\n\n//# sourceMappingURL=index.js.map\n;// CONCATENATED MODULE: ./node_modules/lit-html/directive-helpers.js\n\n/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */const{I:directive_helpers_l}=j,directive_helpers_t=o=>null===o||"object"!=typeof o&&"function"!=typeof o,directive_helpers_i={HTML:1,SVG:2},directive_helpers_n=(o,l)=>void 0===l?void 0!==(null==o?void 0:o._$litType$):(null==o?void 0:o._$litType$)===l,directive_helpers_d=o=>void 0!==(null==o?void 0:o._$litDirective$),directive_helpers_v=o=>null==o?void 0:o._$litDirective$,directive_helpers_e=o=>void 0===o.strings,directive_helpers_c=()=>document.createComment(""),directive_helpers_r=(o,t,i)=>{var n;const d=o._$AA.parentNode,v=void 0===t?o._$AB:t._$AA;if(void 0===i){const t=d.insertBefore(directive_helpers_c(),v),n=d.insertBefore(directive_helpers_c(),v);i=new directive_helpers_l(t,n,o,o.options)}else{const l=i._$AB.nextSibling,t=i._$AM,e=t!==o;if(e){let l;null===(n=i._$AQ)||void 0===n||n.call(i,o),i._$AM=o,void 0!==i._$AP&&(l=o._$AU)!==t._$AU&&i._$AP(l)}if(l!==v||e){let o=i._$AA;for(;o!==l;){const l=o.nextSibling;d.insertBefore(o,v),o=l}}}return i},directive_helpers_u=(o,l,t=o)=>(o._$AI(l,t),o),directive_helpers_f={},directive_helpers_s=(o,l=directive_helpers_f)=>o._$AH=l,directive_helpers_m=o=>o._$AH,directive_helpers_p=o=>{var l;null===(l=o._$AP)||void 0===l||l.call(o,!1,!0);let t=o._$AA;const i=o._$AB.nextSibling;for(;t!==i;){const o=t.nextSibling;t.remove(),t=o}},directive_helpers_a=o=>{o._$AR()};\n//# sourceMappingURL=directive-helpers.js.map\n\n;// CONCATENATED MODULE: ./node_modules/lit-html/directive.js\n/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nconst directive_t={ATTRIBUTE:1,CHILD:2,PROPERTY:3,BOOLEAN_ATTRIBUTE:4,EVENT:5,ELEMENT:6},directive_e=t=>(...e)=>({_$litDirective$:t,values:e});class directive_i{constructor(t){}get _$AU(){return this._$AM._$AU}_$AT(t,e,i){this._$Ct=t,this._$AM=e,this._$Ci=i}_$AS(t,e){return this.update(t,e)}update(t,e){return this.render(...e)}}\n//# sourceMappingURL=directive.js.map\n\n;// CONCATENATED MODULE: ./node_modules/lit-html/async-directive.js\n\n/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */const async_directive_s=(i,t)=>{var e,o;const r=i._$AN;if(void 0===r)return!1;for(const i of r)null===(o=(e=i)._$AO)||void 0===o||o.call(e,t,!1),async_directive_s(i,t);return!0},async_directive_o=i=>{let t,e;do{if(void 0===(t=i._$AM))break;e=t._$AN,e.delete(i),i=t}while(0===(null==e?void 0:e.size))},async_directive_r=i=>{for(let t;t=i._$AM;i=t){let e=t._$AN;if(void 0===e)t._$AN=e=new Set;else if(e.has(i))break;e.add(i),async_directive_l(t)}};function async_directive_n(i){void 0!==this._$AN?(async_directive_o(this),this._$AM=i,async_directive_r(this)):this._$AM=i}function async_directive_h(i,t=!1,e=0){const r=this._$AH,n=this._$AN;if(void 0!==n&&0!==n.size)if(t)if(Array.isArray(r))for(let i=e;i<r.length;i++)async_directive_s(r[i],!1),async_directive_o(r[i]);else null!=r&&(async_directive_s(r,!1),async_directive_o(r));else async_directive_s(this,i)}const async_directive_l=i=>{var t,s,o,r;i.type==directive_t.CHILD&&(null!==(t=(o=i)._$AP)&&void 0!==t||(o._$AP=async_directive_h),null!==(s=(r=i)._$AQ)&&void 0!==s||(r._$AQ=async_directive_n))};class async_directive_c extends directive_i{constructor(){super(...arguments),this._$AN=void 0}_$AT(i,t,e){super._$AT(i,t,e),async_directive_r(this),this.isConnected=i._$AU}_$AO(i,t=!0){var e,r;i!==this.isConnected&&(this.isConnected=i,i?null===(e=this.reconnected)||void 0===e||e.call(this):null===(r=this.disconnected)||void 0===r||r.call(this)),t&&(async_directive_s(this,i),async_directive_o(this))}setValue(t){if(directive_helpers_e(this._$Ct))this._$Ct._$AI(t,this);else{const i=[...this._$Ct._$AH];i[this._$Ci]=t,this._$Ct._$AI(i,this,0)}}disconnected(){}reconnected(){}}\n//# sourceMappingURL=async-directive.js.map\n\n;// CONCATENATED MODULE: ./packages/lit/lib/lit.view.js\n\n\n\n\nclass RenderNode extends async_directive_c {\n  render(tpl, ref) {\n    ref.current = this;\n    return tpl;\n  }\n}\nconst renderNodeDirective = directive_e(RenderNode);\nfunction renderNode(tpl, ref) {\n  if (ref.current instanceof HTMLElement) {\n    D(tpl, ref.current);\n    return undefined;\n  }\n  if (ref.current instanceof RenderNode && ref.current.isConnected) {\n    ref.current.setValue(tpl);\n  }\n  return renderNodeDirective(tpl, ref);\n}\nconst litView = new View({\n  element(result) {\n    D(result.value, this.container);\n  },\n  node(result) {\n    return renderNode(result.value, this.container);\n  }\n});\n;// CONCATENATED MODULE: ./packages/lit/lib/index.js\n\n;// CONCATENATED MODULE: ./packages/h/lib/style.js\nconst css = String.raw;\nfunction setStyle(style, node, styleId) {\n  if (window.ShadowRoot && \'adoptedStyleSheets\' in Document.prototype && \'replace\' in CSSStyleSheet.prototype && node instanceof ShadowRoot) {\n    const sheet = new CSSStyleSheet();\n    sheet[\'replaceSync\'](style);\n    node[\'adoptedStyleSheets\'] = [sheet];\n  } else {\n    const selector = `style${styleId != null ? `#${styleId}` : \'\'}`;\n    let styleEl = node.querySelector(selector);\n    if (styleEl == null) {\n      styleEl = document.createElement(\'style\');\n      if (styleId != null) {\n        styleEl.setAttribute(\'id\', styleId);\n      }\n      styleEl.innerHTML = style;\n      node.insertBefore(styleEl, node.firstChild);\n    } else {\n      styleEl.innerHTML = style;\n    }\n  }\n}\n;// CONCATENATED MODULE: ./packages/gfc/lib/utils/p.js\nfunction utils_p_setProp(key, value) {\n  if (!this.isConnected) {\n    this.props[key] = value;\n    return;\n  }\n  if (value !== this.props[key]) {\n    this[\'__stash__\'] = {\n      ...this[\'__stash__\'],\n      [key]: value\n    };\n  }\n  Promise.resolve({\n    then: () => {\n      let stash = this[\'__stash__\'];\n      if (stash != null) {\n        this.props = {\n          ...this.props,\n          ...stash\n        };\n        stash = null;\n      }\n    }\n  });\n}\nconst utils_p_p = {\n  req(attribute) {\n    return {\n      type: {},\n      attribute\n    };\n  },\n  opt(attribute) {\n    return {\n      type: {},\n      attribute,\n      optional: true\n    };\n  }\n};\n;// CONCATENATED MODULE: ./packages/gfc/lib/NG.js\n\nconst NG_ref2Node = new WeakMap();\nconst NG_getRef2Node = () => NG_ref2Node;\nfunction lib_NG_NG(func) {\n  var _a;\n  const render = (_a = this === null || this === void 0 ? void 0 : this.getRenderFn().node) !== null && _a !== void 0 ? _a : result => result.value;\n  return (ref = {\n    current: null\n  }) => {\n    const nodesSymbol = Symbol("nodes");\n    return (props = {}) => {\n      const _ref = setElNode(nodesSymbol, ref, props.key);\n      let node = NG_ref2Node.get(_ref);\n      if (node == null) {\n        const _node = {\n          ..._ref,\n          props,\n          isScheduledNext: false\n        };\n        const generator = Reflect.apply(func, _node, [props]);\n        _node.generator = generator;\n        _node.next = async function (_props) {\n          this.props = _props || this.props;\n          if (!this.isScheduledNext) {\n            this.isScheduledNext = true;\n            const g = await Promise.resolve(generator);\n            this.isScheduledNext = false;\n            this.value = render.call({\n              container: this\n            }, g.next(this.props));\n          }\n        };\n        node = _node;\n        NG_ref2Node.set(_ref, node);\n      }\n      node.props = props;\n      node.value = render.call({\n        container: node\n      }, node.generator.next(props));\n      return node.value;\n    };\n  };\n}\n;// CONCATENATED MODULE: ./packages/gfc/lib/EG.js\nvar EG_setFunctionName = undefined && undefined.__setFunctionName || function (f, name, prefix) {\n  if (typeof name === "symbol") name = name.description ? "[".concat(name.description, "]") : "";\n  return Object.defineProperty(f, "name", {\n    configurable: true,\n    value: prefix ? "".concat(prefix, " ", name) : name\n  });\n};\n\n\nlet EG_actualEl = null;\nfunction lib_EG_EG(config) {\n  return func => {\n    const constructor = EG_build(func, (config === null || config === void 0 ? void 0 : config.props) || {}, config === null || config === void 0 ? void 0 : config.mapper, this === null || this === void 0 ? void 0 : this.getRenderFn().element);\n    return (name, options) => {\n      try {\n        customElements.define(name, constructor, options);\n      } catch (e) {\n        console.warn(e);\n      }\n      const component = function (_props) {\n        if (new.target != null) {\n          return new constructor();\n        } else {\n          return customElements.whenDefined(name).then(() => customElements.get(name));\n        }\n      };\n      component.adapter = (func, defaultProps) => func(name, defaultProps);\n      return component;\n    };\n  };\n}\nfunction EG_build(func, props, mapper = setProp, render = result => result.value) {\n  var _a;\n  const customEl = (_a = class extends HTMLElement {\n    static get observedAttributes() {\n      return Object.values(this.attributes);\n    }\n    set props(newProps) {\n      if (newProps !== undefined && this.props !== newProps) {\n        this._props = newProps;\n        this.next();\n      }\n    }\n    get props() {\n      return this._props;\n    }\n    async next(props) {\n      this.props = props || this.props;\n      if (!this.isScheduledNext && this.generation != null) {\n        this.isScheduledNext = true;\n        const generator = await Promise.resolve(this.generation);\n        this.isScheduledNext = false;\n        EG_actualEl = this;\n        render.call(this, generator.next(this.props));\n      }\n    }\n    constructor() {\n      super();\n      this.container = this;\n      this.__innerNodes = new Set();\n      this._props = {};\n      this.isScheduledNext = false;\n      for (const pK in props) {\n        const pV = props[pK];\n        let attr = undefined;\n        if ("type" in pV) {\n          attr = pV.attribute;\n        }\n        Reflect.defineProperty(this, pK, {\n          get: () => {\n            return this.props[pK];\n          },\n          set: value => {\n            mapper.apply(this, [pK, value, attr]);\n          },\n          enumerable: true\n        });\n      }\n    }\n    connectedCallback() {\n      this.generation = func.call(this, this.props);\n      EG_actualEl = this;\n      render.call(this, this.generation.next(this.props));\n    }\n    attributeChangedCallback(name, oldValue, newValue) {\n      if (oldValue !== newValue) {\n        for (const [attrKey, attrName] of Object.entries(this.constructor["attributes"])) {\n          if (attrName === name && this[attrKey] !== newValue) {\n            this[attrKey] = newValue;\n            break;\n          }\n        }\n      }\n    }\n    disconnectedCallback() {\n      var _a;\n      const ref2Node = getRef2Node();\n      this.__innerNodes.forEach(it => {\n        var _a;\n        const node = ref2Node.get(it);\n        if (node != null) {\n          (_a = node.generator) === null || _a === void 0 ? void 0 : _a.return();\n          ref2Node.delete(it);\n        }\n      });\n      (_a = this.generation) === null || _a === void 0 ? void 0 : _a.return();\n    }\n  }, EG_setFunctionName(_a, "customEl"), _a.attributes = {}, _a);\n  const attrKey = "attributes";\n  const attributes = Reflect.get(customEl, attrKey);\n  for (const pK in props) {\n    const pV = props[pK];\n    if ("type" in pV && pV.attribute !== undefined) {\n      Reflect.defineProperty(customEl, attrKey, {\n        value: {\n          ...attributes,\n          [pK]: pV.attribute\n        },\n        enumerable: true,\n        writable: true\n      });\n    }\n  }\n  return customEl;\n}\nfunction lib_EG_setElNode(nodesSymbol, ref, key) {\n  if (ref.current != null) {\n    return ref;\n  }\n  let node = {\n    current: null\n  };\n  if (EG_actualEl == null) {\n    return node;\n  }\n  if (key == null) {\n    EG_actualEl.__innerNodes.add(ref);\n    return ref;\n  }\n  if (EG_actualEl[nodesSymbol] == null) {\n    EG_actualEl[nodesSymbol] = {};\n  }\n  const nodes = EG_actualEl[nodesSymbol];\n  if (nodes[key] == null) {\n    EG_actualEl.__innerNodes.add(node);\n    nodes[key] = node;\n  }\n  return nodes[key];\n}\n;// CONCATENATED MODULE: ./packages/gfc/lib/View.js\n\n\nclass View_View {\n  constructor(_render) {\n    this._render = _render;\n    this.element = EG;\n    this.node = NG;\n  }\n  getRenderFn() {\n    return this._render;\n  }\n}\n;// CONCATENATED MODULE: ./packages/gfc/lib/index.js\n\n\n\n\n;// CONCATENATED MODULE: ./node_modules/lit-html/directives/ref.js\n\n/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */const ref_e=()=>new ref_o;class ref_o{}const ref_h=new WeakMap,ref_n=directive_e(class extends async_directive_c{render(t){return A}update(t,[s]){var e;const o=s!==this.G;return o&&void 0!==this.G&&this.ot(void 0),(o||this.rt!==this.lt)&&(this.G=s,this.ct=null===(e=t.options)||void 0===e?void 0:e.host,this.ot(this.lt=t.element)),A}ot(i){var t;if("function"==typeof this.G){const s=null!==(t=this.ct)&&void 0!==t?t:globalThis;let e=ref_h.get(s);void 0===e&&(e=new WeakMap,ref_h.set(s,e)),void 0!==e.get(this.G)&&this.G.call(this.ct,void 0),e.set(this.G,i),void 0!==i&&this.G.call(this.ct,i)}else this.G.value=i}get rt(){var i,t,s;return"function"==typeof this.G?null===(t=ref_h.get(null!==(i=this.ct)&&void 0!==i?i:globalThis))||void 0===t?void 0:t.get(this.G):null===(s=this.G)||void 0===s?void 0:s.value}disconnected(){this.rt===this.lt&&this.ot(void 0)}reconnected(){this.ot(this.lt)}});\n//# sourceMappingURL=ref.js.map\n\n// EXTERNAL MODULE: ./www/src/views/sidemenu/styles/sidemenu.css\nvar sidemenu = __webpack_require__(278);\n;// CONCATENATED MODULE: ./www/src/views/sidemenu/sidemenu.element.tsx\nvar _templateObject, _templateObject2, _templateObject3;\n\nfunction _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }\nfunction _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, "_invoke", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, "_invoke", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, "throw" === methodName && delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method) || "return" !== methodName && (context.method = "throw", context.arg = new TypeError("The iterator does not provide a \'" + methodName + "\' method")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, "catch": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\nfunction _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\n\n\n\n\n\n/**\n * Side menu web component\n */\nvar sidemenuElement = litView.element({\n  props: {\n    /** placeholder text for search input */\n    searchPlaceholder: utils_p_p.opt("search-placeholder"),\n    /** menu data */\n    data: utils_p_p.req(),\n    /** last selected menu item */\n    activeMenuItem: utils_p_p.req(),\n    // EVENTS:\n    onchangeActive: utils_p_p.opt()\n  }\n})( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(params) {\n  var _this = this;\n  var inputElRef, _hideMenuItems, handleMenuLinkClick, handleSearchKeyup, search, makeMenu, _params$searchPlaceho;\n  return _regeneratorRuntime().wrap(function _callee$(_context) {\n    while (1) switch (_context.prev = _context.next) {\n      case 0:\n        makeMenu = function _makeMenu() {\n          var parent = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n          // nested menu level\n          var deepLevel = 0;\n          var findLevel = function findLevel(item) {\n            if (item !== undefined) {\n              deepLevel++;\n              if (item.parent !== undefined) {\n                findLevel(params.data[item.parent]);\n              }\n            }\n          };\n          params.data && parent && findLevel(params.data[parent]);\n          return params.data && Object.keys(params.data).filter(function (key) {\n            return (params.data[key].parent || null) === parent;\n          }).map(function (key) {\n            var styles = [];\n            params.data[key].available && styles.push("cursor: pointer");\n            if (params.data[key].category) {\n              var categoryCssClass = ["insum-menu-category__title"];\n              params.activeMenuItem === key && categoryCssClass.push("insum-menu-category__title_active");\n              return params.data[key].hide ? undefined : x(_templateObject || (_templateObject = _taggedTemplateLiteral(["<div class=\\"insum-menu-category\\">\\n                <span @click=", " class=", " style=", ">\\n                  ", "\\n                </span>\\n                ", "\\n              </div>"])), function (e) {\n                return handleMenuLinkClick(e, key);\n              }, categoryCssClass.join(" "), styles.join(";"), params.data[key].label, makeMenu(key));\n            } else {\n              var linkCssClass = ["insum-menu-category__link"];\n              params.activeMenuItem === key && linkCssClass.push("insum-menu-category__link_active");\n              _hideMenuItems.includes(key) && linkCssClass.push("insum-menu-category__link_hide");\n              styles.push("padding-left: ".concat(deepLevel * 10 + 10, "px"));\n              return params.data[key].hide ? undefined : x(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\\n                <div @click=", " class=", " style=", ">\\n                  ", "\\n                </div>\\n                ", "\\n              "])), function (e) {\n                return handleMenuLinkClick(e, key);\n              }, linkCssClass.join(" "), styles.join(";"), params.data[key].label, makeMenu(key));\n            }\n          });\n        };\n        this.container = this.attachShadow({\n          mode: "open"\n        });\n        setStyle(sidemenu/* default */.A, this.container);\n        inputElRef = ref_e(); // list of hided menu items (after filter)\n        _hideMenuItems = [];\n        /**\n         * Handler for click by menu item\n         *\n         * @param event - click event\n         * @param itemKey - item ID\n         */\n        handleMenuLinkClick = function handleMenuLinkClick(event, itemKey) {\n          event.preventDefault();\n          event.stopPropagation();\n          console.log(itemKey);\n          if (params.data[itemKey].available) {\n            params.activeMenuItem = itemKey;\n            var changeActiveEvent = new CustomEvent("changeActive", {\n              detail: _objectSpread(_objectSpread({}, params.data[itemKey]), {}, {\n                key: itemKey\n              })\n            });\n            _this.dispatchEvent(changeActiveEvent);\n          }\n        };\n        /**\n         * Handler for keyup inside search field\n         *\n         * @param event - keyup event\n         */\n        handleSearchKeyup = function handleSearchKeyup(event) {\n          event.preventDefault();\n          if (event && event.target) {\n            var value = "value" in event.target ? String(event.target["value"]) : "";\n            search(value);\n          }\n        };\n        /**\n         * Filter menu items by text inside search field\n         *\n         * @param searchFor - text from search field\n         */\n        search = function search(searchFor) {\n          _hideMenuItems.length = 0;\n          for (var item in params.data) {\n            if (params.data[item].label.toLowerCase().indexOf(searchFor.toLowerCase()) === -1) {\n              _hideMenuItems.push(item);\n            }\n          }\n          _this.next();\n        };\n        /**\n         * Create a sub-menu template base on data\n         *\n         * @param parent - parent item key\n         */\n        requestAnimationFrame(function () {\n          var _inputElRef$value;\n          (_inputElRef$value = inputElRef.value) === null || _inputElRef$value === void 0 ? void 0 : _inputElRef$value.focus();\n        });\n      case 9:\n        if (false) {}\n        (_params$searchPlaceho = params.searchPlaceholder) !== null && _params$searchPlaceho !== void 0 ? _params$searchPlaceho : params.searchPlaceholder = "";\n        _context.next = 13;\n        return x(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["<div class=\\"insum-menu__sidenav\\">\\n        <div class=\\"insum-menu-search\\">\\n          <insum-search-icon class=\\"insum-menu-search__icon\\"></insum-search-icon>\\n          <input @keyup=", " type=\\"text\\" .placeholder=", " .ref=", ">\\n        </div>\\n        ", "\\n        <slot></slot>\\n      </div>"])), handleSearchKeyup, params.searchPlaceholder, ref_n(inputElRef), makeMenu());\n      case 13:\n        params = _context.sent;\n        _context.next = 9;\n        break;\n      case 16:\n      case "end":\n        return _context.stop();\n    }\n  }, _callee, this);\n}));\n// EXTERNAL MODULE: ./www/src/main.css\nvar main = __webpack_require__(820);\n;// CONCATENATED MODULE: ./www/src/views/counter-lit/counter.node.tsx\nfunction counter_node_typeof(obj) { "@babel/helpers - typeof"; return counter_node_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, counter_node_typeof(obj); }\nvar counter_node_templateObject;\n\nfunction counter_node_regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ counter_node_regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, "_invoke", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == counter_node_typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, "_invoke", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, "throw" === methodName && delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method) || "return" !== methodName && (context.method = "throw", context.arg = new TypeError("The iterator does not provide a \'" + methodName + "\' method")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, "catch": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\nfunction counter_node_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }\n\nvar counterNode = litView.node( /*#__PURE__*/counter_node_regeneratorRuntime().mark(function _callee(props) {\n  var _this = this;\n  var count, _props;\n  return counter_node_regeneratorRuntime().wrap(function _callee$(_context) {\n    while (1) switch (_context.prev = _context.next) {\n      case 0:\n        count = 0;\n        this.next(); // just for tests\n        _context.prev = 2;\n      case 3:\n        if (false) {}\n        _context.next = 6;\n        return x(counter_node_templateObject || (counter_node_templateObject = counter_node_taggedTemplateLiteral(["\\n          <button type=\\"button\\" @click=", ">\\n            ", "\\n          </button>\\n          <i>", "</i>\\n        "])), function () {\n          count++, _this.next();\n        }, (_props = props) === null || _props === void 0 ? void 0 : _props.msg, count);\n      case 6:\n        props = _context.sent;\n        _context.next = 3;\n        break;\n      case 9:\n        _context.prev = 9;\n        console.log("A CounterNode with lit-html render was disconnected");\n        return _context.finish(9);\n      case 12:\n      case "end":\n        return _context.stop();\n    }\n  }, _callee, this, [[2,, 9, 12]]);\n}));\n// import { NG } from \'@web-companions/gfc\';\n// import { html, render } from \'uhtml\';\n// function renderNode(node: { current: object | Node | null }, tpl: any) {\n//   if (node.current instanceof Node) {\n//     render(node.current, html`${tpl}`);\n//     return undefined;\n//   } else {\n//     const a = html.for(node)`${tpl}`;\n//     return a;\n//   }\n// }\n// export const counterNode = NG()(function* (props: { msg: string }) {\n//   let count = 0;\n//   this.next(); // just for tests\n//   while (true) {\n//     props = yield renderNode(\n//       this,\n//       <>\n//         <button\n//           type="button"\n//           onclick={() => {\n//             count++, this.next();\n//           }}\n//         >\n//           {props?.msg}\n//         </button>\n//         <i>{count}</i>\n//       </>\n//     );\n//   }\n// });\n;// CONCATENATED MODULE: ./packages/h/lib/template.js\nfunction is(condition, value) {\n  return condition ? value : undefined;\n}\n;// CONCATENATED MODULE: ./www/src/views/counter-lit/counter.element.tsx\nfunction counter_element_typeof(obj) { "@babel/helpers - typeof"; return counter_element_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, counter_element_typeof(obj); }\nvar counter_element_templateObject, counter_element_templateObject2;\n\nfunction counter_element_regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ counter_element_regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, "_invoke", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == counter_element_typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, "_invoke", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, "throw" === methodName && delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method) || "return" !== methodName && (context.method = "throw", context.arg = new TypeError("The iterator does not provide a \'" + methodName + "\' method")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, "catch": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\nfunction counter_element_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }\n\n\n\n\nvar CounterNode = counterNode();\nvar CounterNode1 = counterNode();\nvar counterElement = litView.element({\n  props: {\n    msg: utils_p_p.req()\n  }\n})( /*#__PURE__*/counter_element_regeneratorRuntime().mark(function _callee(props) {\n  var _this = this;\n  var count, isShowingTempEl, _props;\n  return counter_element_regeneratorRuntime().wrap(function _callee$(_context) {\n    while (1) switch (_context.prev = _context.next) {\n      case 0:\n        count = 0;\n        isShowingTempEl = false;\n        setTimeout(function () {\n          isShowingTempEl = true;\n          _this.next();\n        }, 2000);\n        _context.prev = 3;\n      case 4:\n        if (false) {}\n        _context.next = 7;\n        return x(counter_element_templateObject || (counter_element_templateObject = counter_element_taggedTemplateLiteral(["<div class=\\"container\\">\\n          <div class=\\"row\\">\\n            <button class=\\"btn\\" type=\\"button\\" @click=", ">\\n              ", "\\n            </button>\\n            <i>", "</i>\\n          </div>\\n\\n          ", "\\n\\n          ", "\\n\\n          ", "\\n\\n          ", "\\n        </div>"])), function () {\n          count++;\n          _this.next();\n        }, (_props = props) === null || _props === void 0 ? void 0 : _props.msg, count, CounterNode({\n          key: "1",\n          msg: "Counter Node as JSX Tag1"\n        }), CounterNode({\n          key: "2",\n          msg: "Counter Node as JSX Tag2"\n        }), CounterNode({\n          msg: "Counter Node as JSX Tag3"\n        }), is(isShowingTempEl, x(counter_element_templateObject2 || (counter_element_templateObject2 = counter_element_taggedTemplateLiteral(["", ""])), CounterNode1({\n          msg: "Counter Node as JSX By condition"\n        }))));\n      case 7:\n        props = _context.sent;\n        _context.next = 4;\n        break;\n      case 10:\n        _context.prev = 10;\n        console.log("A CounterElement with lit-html render was disconnected");\n        return _context.finish(10);\n      case 13:\n      case "end":\n        return _context.stop();\n    }\n  }, _callee, null, [[3,, 10, 13]]);\n}));\n;// CONCATENATED MODULE: ./node_modules/@github/template-parts/lib/template-string-parser.js\nfunction* parse(text) {\n    let value = \'\';\n    let tokenStart = 0;\n    let open = false;\n    for (let i = 0; i < text.length; i += 1) {\n        if (text[i] === \'{\' && text[i + 1] === \'{\' && text[i - 1] !== \'\\\\\' && !open) {\n            open = true;\n            if (value)\n                yield { type: \'string\', start: tokenStart, end: i, value };\n            value = \'{{\';\n            tokenStart = i;\n            i += 2;\n        }\n        else if (text[i] === \'}\' && text[i + 1] === \'}\' && text[i - 1] !== \'\\\\\' && open) {\n            open = false;\n            yield { type: \'part\', start: tokenStart, end: i + 2, value: value.slice(2).trim() };\n            value = \'\';\n            i += 2;\n            tokenStart = i;\n        }\n        value += text[i] || \'\';\n    }\n    if (value)\n        yield { type: \'string\', start: tokenStart, end: text.length, value };\n}\n//# sourceMappingURL=template-string-parser.js.map\n;// CONCATENATED MODULE: ./node_modules/@github/template-parts/lib/attribute-template-part.js\nvar __classPrivateFieldSet = (undefined && undefined.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === "m") throw new TypeError("Private method is not writable");\n    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");\n    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");\n    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (undefined && undefined.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");\n    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");\n    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _AttributeTemplatePart_setter, _AttributeTemplatePart_value;\nclass AttributeTemplatePart {\n    constructor(setter, expression) {\n        this.expression = expression;\n        _AttributeTemplatePart_setter.set(this, void 0);\n        _AttributeTemplatePart_value.set(this, \'\');\n        __classPrivateFieldSet(this, _AttributeTemplatePart_setter, setter, "f");\n        __classPrivateFieldGet(this, _AttributeTemplatePart_setter, "f").updateParent(\'\');\n    }\n    get attributeName() {\n        return __classPrivateFieldGet(this, _AttributeTemplatePart_setter, "f").attr.name;\n    }\n    get attributeNamespace() {\n        return __classPrivateFieldGet(this, _AttributeTemplatePart_setter, "f").attr.namespaceURI;\n    }\n    get value() {\n        return __classPrivateFieldGet(this, _AttributeTemplatePart_value, "f");\n    }\n    set value(value) {\n        __classPrivateFieldSet(this, _AttributeTemplatePart_value, value || \'\', "f");\n        __classPrivateFieldGet(this, _AttributeTemplatePart_setter, "f").updateParent(value);\n    }\n    get element() {\n        return __classPrivateFieldGet(this, _AttributeTemplatePart_setter, "f").element;\n    }\n    get booleanValue() {\n        return __classPrivateFieldGet(this, _AttributeTemplatePart_setter, "f").booleanValue;\n    }\n    set booleanValue(value) {\n        __classPrivateFieldGet(this, _AttributeTemplatePart_setter, "f").booleanValue = value;\n    }\n}\n_AttributeTemplatePart_setter = new WeakMap(), _AttributeTemplatePart_value = new WeakMap();\nclass AttributeValueSetter {\n    constructor(element, attr) {\n        this.element = element;\n        this.attr = attr;\n        this.partList = [];\n    }\n    get booleanValue() {\n        return this.element.hasAttributeNS(this.attr.namespaceURI, this.attr.name);\n    }\n    set booleanValue(value) {\n        if (this.partList.length !== 1) {\n            throw new DOMException(\'Operation not supported\', \'NotSupportedError\');\n        }\n        ;\n        this.partList[0].value = value ? \'\' : null;\n    }\n    append(part) {\n        this.partList.push(part);\n    }\n    updateParent(partValue) {\n        if (this.partList.length === 1 && partValue === null) {\n            this.element.removeAttributeNS(this.attr.namespaceURI, this.attr.name);\n        }\n        else {\n            const str = this.partList.map(s => (typeof s === \'string\' ? s : s.value)).join(\'\');\n            this.element.setAttributeNS(this.attr.namespaceURI, this.attr.name, str);\n        }\n    }\n}\n//# sourceMappingURL=attribute-template-part.js.map\n;// CONCATENATED MODULE: ./node_modules/@github/template-parts/lib/node-template-part.js\nvar node_template_part_classPrivateFieldSet = (undefined && undefined.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === "m") throw new TypeError("Private method is not writable");\n    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");\n    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");\n    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar node_template_part_classPrivateFieldGet = (undefined && undefined.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");\n    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");\n    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _NodeTemplatePart_parts;\nclass NodeTemplatePart {\n    constructor(node, expression) {\n        this.expression = expression;\n        _NodeTemplatePart_parts.set(this, void 0);\n        node_template_part_classPrivateFieldSet(this, _NodeTemplatePart_parts, [node], "f");\n        node.textContent = \'\';\n    }\n    get value() {\n        return node_template_part_classPrivateFieldGet(this, _NodeTemplatePart_parts, "f").map(node => node.textContent).join(\'\');\n    }\n    set value(string) {\n        this.replace(string);\n    }\n    get previousSibling() {\n        return node_template_part_classPrivateFieldGet(this, _NodeTemplatePart_parts, "f")[0].previousSibling;\n    }\n    get nextSibling() {\n        return node_template_part_classPrivateFieldGet(this, _NodeTemplatePart_parts, "f")[node_template_part_classPrivateFieldGet(this, _NodeTemplatePart_parts, "f").length - 1].nextSibling;\n    }\n    replace(...nodes) {\n        const parts = nodes.map(node => {\n            if (typeof node === \'string\')\n                return new Text(node);\n            return node;\n        });\n        if (!parts.length)\n            parts.push(new Text(\'\'));\n        node_template_part_classPrivateFieldGet(this, _NodeTemplatePart_parts, "f")[0].before(...parts);\n        for (const part of node_template_part_classPrivateFieldGet(this, _NodeTemplatePart_parts, "f"))\n            part.remove();\n        node_template_part_classPrivateFieldSet(this, _NodeTemplatePart_parts, parts, "f");\n    }\n}\n_NodeTemplatePart_parts = new WeakMap();\n//# sourceMappingURL=node-template-part.js.map\n;// CONCATENATED MODULE: ./node_modules/@github/template-parts/lib/processors.js\n\nfunction createProcessor(processPart) {\n    return {\n        createCallback(instance, parts, params) {\n            this.processCallback(instance, parts, params);\n        },\n        processCallback(_, parts, params) {\n            var _a;\n            if (typeof params !== \'object\' || !params)\n                return;\n            for (const part of parts) {\n                if (part.expression in params) {\n                    const value = (_a = params[part.expression]) !== null && _a !== void 0 ? _a : \'\';\n                    processPart(part, value);\n                }\n            }\n        }\n    };\n}\nfunction processPropertyIdentity(part, value) {\n    part.value = String(value);\n}\nfunction processBooleanAttribute(part, value) {\n    if (typeof value === \'boolean\' &&\n        part instanceof AttributeTemplatePart &&\n        typeof part.element[part.attributeName] === \'boolean\') {\n        part.booleanValue = value;\n        return true;\n    }\n    return false;\n}\nconst propertyIdentity = createProcessor(processPropertyIdentity);\nconst propertyIdentityOrBooleanAttribute = createProcessor((part, value) => {\n    processBooleanAttribute(part, value) || processPropertyIdentity(part, value);\n});\n//# sourceMappingURL=processors.js.map\n;// CONCATENATED MODULE: ./node_modules/@github/template-parts/lib/template-instance.js\nvar template_instance_classPrivateFieldSet = (undefined && undefined.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === "m") throw new TypeError("Private method is not writable");\n    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");\n    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");\n    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar template_instance_classPrivateFieldGet = (undefined && undefined.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");\n    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");\n    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _TemplateInstance_processor, _TemplateInstance_parts;\n\n\n\n\nfunction* collectParts(el) {\n    const walker = el.ownerDocument.createTreeWalker(el, NodeFilter.SHOW_TEXT | NodeFilter.SHOW_ELEMENT, null, false);\n    let node;\n    while ((node = walker.nextNode())) {\n        if (node instanceof Element && node.hasAttributes()) {\n            for (let i = 0; i < node.attributes.length; i += 1) {\n                const attr = node.attributes.item(i);\n                if (attr && attr.value.includes(\'{{\')) {\n                    const valueSetter = new AttributeValueSetter(node, attr);\n                    for (const token of parse(attr.value)) {\n                        if (token.type === \'string\') {\n                            valueSetter.append(token.value);\n                        }\n                        else {\n                            const part = new AttributeTemplatePart(valueSetter, token.value);\n                            valueSetter.append(part);\n                            yield part;\n                        }\n                    }\n                }\n            }\n        }\n        else if (node instanceof Text && node.textContent && node.textContent.includes(\'{{\')) {\n            for (const token of parse(node.textContent)) {\n                if (token.end < node.textContent.length)\n                    node.splitText(token.end);\n                if (token.type === \'part\')\n                    yield new NodeTemplatePart(node, token.value);\n                break;\n            }\n        }\n    }\n}\nclass TemplateInstance extends DocumentFragment {\n    constructor(template, params, processor = propertyIdentity) {\n        var _a, _b;\n        super();\n        _TemplateInstance_processor.set(this, void 0);\n        _TemplateInstance_parts.set(this, void 0);\n        // This is to fix an inconsistency in Safari which prevents us from\n        // correctly sub-classing DocumentFragment.\n        // https://bugs.webkit.org/show_bug.cgi?id=195556\n        if (Object.getPrototypeOf(this) !== TemplateInstance.prototype) {\n            Object.setPrototypeOf(this, TemplateInstance.prototype);\n        }\n        this.appendChild(template.content.cloneNode(true));\n        template_instance_classPrivateFieldSet(this, _TemplateInstance_parts, Array.from(collectParts(this)), "f");\n        template_instance_classPrivateFieldSet(this, _TemplateInstance_processor, processor, "f");\n        (_b = (_a = template_instance_classPrivateFieldGet(this, _TemplateInstance_processor, "f")).createCallback) === null || _b === void 0 ? void 0 : _b.call(_a, this, template_instance_classPrivateFieldGet(this, _TemplateInstance_parts, "f"), params);\n    }\n    update(params) {\n        template_instance_classPrivateFieldGet(this, _TemplateInstance_processor, "f").processCallback(this, template_instance_classPrivateFieldGet(this, _TemplateInstance_parts, "f"), params);\n    }\n}\n_TemplateInstance_processor = new WeakMap(), _TemplateInstance_parts = new WeakMap();\n//# sourceMappingURL=template-instance.js.map\n;// CONCATENATED MODULE: ./node_modules/@github/template-parts/lib/index.js\n\n\n\n\n\n//# sourceMappingURL=index.js.map\n;// CONCATENATED MODULE: ./node_modules/@github/jtml/lib/directive.js\nconst directives = new WeakSet();\nfunction isDirective(directiveCallback) {\n    return directives.has(directiveCallback);\n}\nfunction processDirective(part, value) {\n    if (isDirective(value)) {\n        value(part);\n        return true;\n    }\n    return false;\n}\nfunction directive(directiveFactory) {\n    return (...values) => {\n        const callback = directiveFactory(...values);\n        directives.add(callback);\n        return callback;\n    };\n}\n//# sourceMappingURL=directive.js.map\n;// CONCATENATED MODULE: ./node_modules/@github/jtml/lib/events.js\n\nconst eventListeners = new WeakMap();\nclass EventHandler {\n    constructor(element, type) {\n        this.element = element;\n        this.type = type;\n        this.element.addEventListener(this.type, this);\n        eventListeners.get(this.element).set(this.type, this);\n    }\n    set(listener) {\n        if (typeof listener == \'function\') {\n            this.handleEvent = listener.bind(this.element);\n        }\n        else if (typeof listener === \'object\' && typeof listener.handleEvent === \'function\') {\n            this.handleEvent = listener.handleEvent.bind(listener);\n        }\n        else {\n            this.element.removeEventListener(this.type, this);\n            eventListeners.get(this.element).delete(this.type);\n        }\n    }\n    static for(part) {\n        if (!eventListeners.has(part.element))\n            eventListeners.set(part.element, new Map());\n        const type = part.attributeName.slice(2);\n        const elementListeners = eventListeners.get(part.element);\n        if (elementListeners.has(type))\n            return elementListeners.get(type);\n        return new EventHandler(part.element, type);\n    }\n}\nfunction processEvent(part, value) {\n    if (part instanceof AttributeTemplatePart && part.attributeName.startsWith(\'on\')) {\n        EventHandler.for(part).set(value);\n        part.element.removeAttributeNS(part.attributeNamespace, part.attributeName);\n        return true;\n    }\n    return false;\n}\n//# sourceMappingURL=events.js.map\n;// CONCATENATED MODULE: ./node_modules/@github/jtml/lib/html.js\n\n\n\nfunction processSubTemplate(part, value) {\n    if (value instanceof TemplateResult && part instanceof NodeTemplatePart) {\n        value.renderInto(part);\n        return true;\n    }\n    return false;\n}\nfunction processDocumentFragment(part, value) {\n    if (value instanceof DocumentFragment && part instanceof NodeTemplatePart) {\n        if (value.childNodes.length)\n            part.replace(...value.childNodes);\n        return true;\n    }\n    return false;\n}\nfunction isIterable(value) {\n    return typeof value === \'object\' && Symbol.iterator in value;\n}\nfunction processIterable(part, value) {\n    if (!isIterable(value))\n        return false;\n    if (part instanceof NodeTemplatePart) {\n        const nodes = [];\n        for (const item of value) {\n            if (item instanceof TemplateResult) {\n                const fragment = document.createDocumentFragment();\n                item.renderInto(fragment);\n                nodes.push(...fragment.childNodes);\n            }\n            else if (item instanceof DocumentFragment) {\n                nodes.push(...item.childNodes);\n            }\n            else {\n                nodes.push(String(item));\n            }\n        }\n        if (nodes.length)\n            part.replace(...nodes);\n        return true;\n    }\n    else {\n        part.value = Array.from(value).join(\' \');\n        return true;\n    }\n}\nfunction processPart(part, value) {\n    processDirective(part, value) ||\n        processBooleanAttribute(part, value) ||\n        processEvent(part, value) ||\n        processSubTemplate(part, value) ||\n        processDocumentFragment(part, value) ||\n        processIterable(part, value) ||\n        processPropertyIdentity(part, value);\n}\nconst templates = new WeakMap();\nconst renderedTemplates = new WeakMap();\nconst renderedTemplateInstances = new WeakMap();\nclass TemplateResult {\n    constructor(strings, values, processor) {\n        this.strings = strings;\n        this.values = values;\n        this.processor = processor;\n    }\n    get template() {\n        if (templates.has(this.strings)) {\n            return templates.get(this.strings);\n        }\n        else {\n            const template = document.createElement(\'template\');\n            const end = this.strings.length - 1;\n            template.innerHTML = this.strings.reduce((str, cur, i) => str + cur + (i < end ? `{{ ${i} }}` : \'\'), \'\');\n            templates.set(this.strings, template);\n            return template;\n        }\n    }\n    renderInto(element) {\n        const template = this.template;\n        if (renderedTemplates.get(element) !== template) {\n            renderedTemplates.set(element, template);\n            const instance = new TemplateInstance(template, this.values, this.processor);\n            renderedTemplateInstances.set(element, instance);\n            if (element instanceof NodeTemplatePart) {\n                element.replace(...instance.children);\n            }\n            else {\n                element.appendChild(instance);\n            }\n            return;\n        }\n        renderedTemplateInstances.get(element).update(this.values);\n    }\n}\nconst defaultProcessor = createProcessor(processPart);\nfunction html(strings, ...values) {\n    return new TemplateResult(strings, values, defaultProcessor);\n}\nfunction render(result, element) {\n    result.renderInto(element);\n}\n//# sourceMappingURL=html.js.map\n;// CONCATENATED MODULE: ./node_modules/@github/jtml/lib/until.js\n\n\nconst untils = new WeakMap();\nconst until = directive((...promises) => (part) => {\n    if (!untils.has(part))\n        untils.set(part, { i: promises.length });\n    const state = untils.get(part);\n    for (let i = 0; i < promises.length; i += 1) {\n        if (promises[i] instanceof Promise) {\n            // eslint-disable-next-line github/no-then\n            Promise.resolve(promises[i]).then(value => {\n                if (i < state.i) {\n                    state.i = i;\n                    processPart(part, value);\n                }\n            });\n        }\n        else if (i <= state.i) {\n            state.i = i;\n            processPart(part, promises[i]);\n        }\n    }\n});\n//# sourceMappingURL=until.js.map\n;// CONCATENATED MODULE: ./node_modules/@github/jtml/lib/unsafe-html.js\n\n\nconst unsafeHTML = directive((value) => (part) => {\n    if (!(part instanceof NodeTemplatePart))\n        return;\n    const template = document.createElement(\'template\');\n    template.innerHTML = value;\n    const fragment = document.importNode(template.content, true);\n    part.replace(...fragment.childNodes);\n});\n//# sourceMappingURL=unsafe-html.js.map\n;// CONCATENATED MODULE: ./node_modules/@github/jtml/lib/index.js\n\n\n\n\n//# sourceMappingURL=index.js.map\n;// CONCATENATED MODULE: ./packages/jtml/node_modules/@web-companions/gfc/lib/utils/p.js\nfunction lib_utils_p_setProp(key, value) {\n    if (!this.isConnected) {\n        this.props[key] = value;\n        return;\n    }\n    if (value !== this.props[key]) {\n        this[\'__stash__\'] = {\n            ...this[\'__stash__\'],\n            [key]: value,\n        };\n    }\n    Promise.resolve({\n        then: () => {\n            let stash = this[\'__stash__\'];\n            if (stash != null) {\n                this.props = {\n                    ...this.props,\n                    ...stash,\n                };\n                stash = null;\n            }\n        },\n    });\n}\nconst lib_utils_p_p = {\n    req(attribute) {\n        return {\n            type: {},\n            attribute,\n        };\n    },\n    opt(attribute) {\n        return {\n            type: {},\n            attribute,\n            optional: true,\n        };\n    },\n};\n//# sourceMappingURL=p.js.map\n;// CONCATENATED MODULE: ./packages/jtml/node_modules/@web-companions/gfc/lib/EG.js\nvar lib_EG_setFunctionName = (undefined && undefined.__setFunctionName) || function (f, name, prefix) {\n    if (typeof name === "symbol") name = name.description ? "[".concat(name.description, "]") : "";\n    return Object.defineProperty(f, "name", { configurable: true, value: prefix ? "".concat(prefix, " ", name) : name });\n};\n\nlet lib_EG_actualEl = undefined;\nfunction gfc_lib_EG_EG(config) {\n    return (func) => {\n        const constructor = lib_EG_build(func, (config === null || config === void 0 ? void 0 : config.props) || {}, config === null || config === void 0 ? void 0 : config.mapper, this === null || this === void 0 ? void 0 : this.getRenderFn().element);\n        return (name, options) => {\n            try {\n                customElements.define(name, constructor, options);\n            }\n            catch (e) {\n                console.warn(e);\n            }\n            const component = function (_props) {\n                if (new.target != null) {\n                    return new constructor();\n                }\n                else {\n                    return customElements.whenDefined(name).then(() => customElements.get(name));\n                }\n            };\n            component.adapter = (func, defaultProps) => func(name, defaultProps);\n            return component;\n        };\n    };\n}\nfunction lib_EG_build(func, props, mapper = lib_utils_p_setProp, render = (result) => result.value) {\n    var _a;\n    const customEl = (_a = class extends HTMLElement {\n            static get observedAttributes() {\n                return Object.values(this.attributes);\n            }\n            set props(newProps) {\n                if (newProps !== undefined && this.props !== newProps) {\n                    this._props = newProps;\n                    this.next();\n                }\n            }\n            get props() {\n                return this._props;\n            }\n            async next(props) {\n                this.props = props || this.props;\n                if (!this.isScheduledNext && this.generation != null) {\n                    this.isScheduledNext = true;\n                    const generator = await Promise.resolve(this.generation);\n                    this.isScheduledNext = false;\n                    lib_EG_actualEl = this;\n                    render.call(this, generator.next(this.props));\n                }\n            }\n            constructor() {\n                super();\n                this.container = this;\n                this._props = {};\n                this.isScheduledNext = false;\n                for (const pK in props) {\n                    const pV = props[pK];\n                    let attr = undefined;\n                    if (\'type\' in pV) {\n                        attr = pV.attribute;\n                    }\n                    Reflect.defineProperty(this, pK, {\n                        get: () => {\n                            return this.props[pK];\n                        },\n                        set: (value) => {\n                            mapper.apply(this, [pK, value, attr]);\n                        },\n                        enumerable: true,\n                    });\n                }\n            }\n            connectedCallback() {\n                this.generation = func.call(this, this.props);\n                lib_EG_actualEl = this;\n                render.call(this, this.generation.next(this.props));\n            }\n            attributeChangedCallback(name, oldValue, newValue) {\n                if (oldValue !== newValue) {\n                    for (const [attrKey, attrName] of Object.entries(this.constructor[\'attributes\'])) {\n                        if (attrName === name && this[attrKey] !== newValue) {\n                            this[attrKey] = newValue;\n                            break;\n                        }\n                    }\n                }\n            }\n            disconnectedCallback() {\n                var _a;\n                (_a = this.generation) === null || _a === void 0 ? void 0 : _a.return();\n            }\n        },\n        lib_EG_setFunctionName(_a, "customEl"),\n        _a.attributes = {},\n        _a);\n    const attrKey = \'attributes\';\n    const attributes = Reflect.get(customEl, attrKey);\n    for (const pK in props) {\n        const pV = props[pK];\n        if (\'type\' in pV && pV.attribute !== undefined) {\n            Reflect.defineProperty(customEl, attrKey, {\n                value: {\n                    ...attributes,\n                    [pK]: pV.attribute,\n                },\n                enumerable: true,\n                writable: true,\n            });\n        }\n    }\n    return customEl;\n}\nfunction gfc_lib_EG_setElNode(nodesSymbol, key) {\n    let node = { current: null };\n    if (lib_EG_actualEl == null) {\n        return node;\n    }\n    if (lib_EG_actualEl[nodesSymbol] == null) {\n        lib_EG_actualEl[nodesSymbol] = {};\n    }\n    const nodes = lib_EG_actualEl[nodesSymbol];\n    if (nodes[key] == null) {\n        nodes[key] = node;\n    }\n    node = nodes[key];\n    return node;\n}\n//# sourceMappingURL=EG.js.map\n;// CONCATENATED MODULE: ./packages/jtml/node_modules/@web-companions/gfc/lib/NG.js\n\nconst lib_NG_ref2Node = new WeakMap();\nfunction gfc_lib_NG_NG(func) {\n    var _a;\n    const render = (_a = this === null || this === void 0 ? void 0 : this.getRenderFn().node) !== null && _a !== void 0 ? _a : ((result) => result.value);\n    return (ref = { current: null }) => {\n        const nodesSymbol = Symbol(\'nodes\');\n        return (props = {}) => {\n            const _ref = props.key != null ? gfc_lib_EG_setElNode(nodesSymbol, props.key) : ref;\n            let node = lib_NG_ref2Node.get(_ref);\n            if (node == null) {\n                const _node = {\n                    ..._ref,\n                    props,\n                    isScheduledNext: false,\n                };\n                const generator = Reflect.apply(func, _node, [props]);\n                _node.generator = generator;\n                _node.next = async function (_props) {\n                    this.props = _props || this.props;\n                    if (!this.isScheduledNext) {\n                        this.isScheduledNext = true;\n                        const g = await Promise.resolve(generator);\n                        this.isScheduledNext = false;\n                        this.value = render.call({ container: this }, g.next(this.props));\n                    }\n                };\n                node = _node;\n                lib_NG_ref2Node.set(_ref, node);\n            }\n            node.props = props;\n            node.value = render.call({ container: node }, node.generator.next(props));\n            return node.value;\n        };\n    };\n}\n//# sourceMappingURL=NG.js.map\n;// CONCATENATED MODULE: ./packages/jtml/node_modules/@web-companions/gfc/lib/View.js\n\n\nclass lib_View_View {\n    constructor(_render) {\n        this._render = _render;\n        this.element = gfc_lib_EG_EG;\n        this.node = gfc_lib_NG_NG;\n    }\n    getRenderFn() {\n        return this._render;\n    }\n}\n//# sourceMappingURL=View.js.map\n;// CONCATENATED MODULE: ./packages/jtml/node_modules/@web-companions/gfc/lib/index.js\n\n\n\n\n//# sourceMappingURL=index.js.map\n;// CONCATENATED MODULE: ./packages/jtml/lib/jtml.view.js\n\n\n\n\nconst jtml_view_renderNodeDirective = directive((tpl, ref) => part => {\n  if (ref.current instanceof HTMLElement) {\n    render(tpl, ref.current);\n    return undefined;\n  }\n  ref.current = part;\n  processPart(part, tpl);\n});\nfunction jtml_view_renderNode(tpl, ref) {\n  if (ref.current instanceof HTMLElement) {\n    render(tpl, ref.current);\n    return undefined;\n  }\n  if (ref.current != null && "value" in ref.current) {\n    processPart(ref.current, tpl);\n  }\n  return jtml_view_renderNodeDirective(tpl, ref);\n}\nconst view = new lib_View_View({\n  element(result) {\n    render(result.value ?? html``, this.container);\n  },\n  node(result) {\n    return jtml_view_renderNode(result.value, this.container);\n  }\n});\n;// CONCATENATED MODULE: ./packages/jtml/lib/index.js\n\n\n;// CONCATENATED MODULE: ./www/src/views/counter-jtml/counter.node.tsx\n\n\nconst counter_node_counterNode = view.node(function* (props) {\n  let count = 0;\n  this.next(); // just for tests\n  try {\n    while (true) {\n      props = yield html`\n          <button type="button" onclick="${() => {\n        count++, this.next();\n      }}">\n            ${props?.msg}\n          </button>\n          <i>${count}</i>\n        `;\n    }\n  } finally {\n    console.log("A CounterNode with jtml render was disconnected");\n  }\n});\n;// CONCATENATED MODULE: ./www/src/views/counter-jtml/counter.element.tsx\n\n\n\n\nconst counter_element_CounterNode = counter_node_counterNode();\nconst counter_element_CounterNode1 = counter_node_counterNode();\nconst counter_element_counterElement = view.element({\n  props: {\n    msg: lib_utils_p_p.req()\n  }\n})(function* (props) {\n  let count = 0;\n  let isShowingTempEl = false;\n  setTimeout(() => {\n    isShowingTempEl = true;\n    this.next();\n  }, 2000);\n  try {\n    while (true) {\n      props = yield html`<div class="container">\n          <div class="row">\n            <button class="btn" type="button" onclick="${() => {\n        count++;\n        this.next();\n      }}">\n              ${props?.msg}\n            </button>\n            <i>${count}</i>\n          </div>\n\n          ${counter_element_CounterNode({\n        key: "1",\n        msg: "Counter Node as JSX Tag1"\n      })}\n\n          ${counter_element_CounterNode({\n        key: "2",\n        msg: "Counter Node as JSX Tag2"\n      })}\n\n          ${counter_element_CounterNode({\n        msg: "Counter Node as JSX Tag3"\n      })}\n\n          ${is(isShowingTempEl, html`${counter_element_CounterNode1({\n        msg: "Counter Node as JSX By condition"\n      })}`)}\n        </div>`;\n    }\n  } finally {\n    console.log("A CounterElement with jtml render was disconnected");\n  }\n});\n// EXTERNAL MODULE: ./www/src/views/gh-gist/ghGist.css\nvar ghGist = __webpack_require__(396);\n// EXTERNAL MODULE: ./www/src/views/gh-gist/ghGistIframe.css\nvar ghGistIframe = __webpack_require__(552);\n;// CONCATENATED MODULE: ./www/src/views/gh-gist/ghGist.element.tsx\nfunction ghGist_element_typeof(obj) { "@babel/helpers - typeof"; return ghGist_element_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, ghGist_element_typeof(obj); }\nvar ghGist_element_templateObject;\n\nfunction ghGist_element_regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ ghGist_element_regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, "_invoke", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == ghGist_element_typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, "_invoke", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, "throw" === methodName && delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method) || "return" !== methodName && (context.method = "throw", context.arg = new TypeError("The iterator does not provide a \'" + methodName + "\' method")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, "catch": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\nfunction ghGist_element_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }\n\n\n\n\n\n\nvar ghGistElement = litView.element({\n  props: {\n    sharedLink: utils_p_p.req("iframeid")\n  }\n})( /*#__PURE__*/ghGist_element_regeneratorRuntime().mark(function _callee(params) {\n  var iframeRef;\n  return ghGist_element_regeneratorRuntime().wrap(function _callee$(_context) {\n    while (1) switch (_context.prev = _context.next) {\n      case 0:\n        setStyle(ghGist/* default */.A, this.container);\n        iframeRef = ref_e();\n        requestAnimationFrame(function () {\n          var iframeEl = iframeRef.value;\n          if (iframeEl == null) {\n            return;\n          }\n          var iframeElWindow = iframeEl["contentWindow"];\n          var doc = iframeEl["contentDocument"] || (iframeElWindow === null || iframeElWindow === void 0 ? void 0 : iframeElWindow.document);\n          if (doc == null) {\n            return;\n          }\n          doc.open();\n          doc.write( /*html*/"\\n      <html>\\n        <body>\\n          <scr" + "ipt type=\\"text/javascript\\" src=\\"".concat(params.sharedLink, ".js\\"></sc") + "ript>\\n        </body>\\n      </html>\\n      ");\n          doc.close();\n          if (iframeElWindow == null) {\n            return;\n          }\n          iframeElWindow.onload = function () {\n            if (doc == null) {\n              return;\n            }\n            setStyle(ghGistIframe/* default */.A, doc.body);\n            iframeEl.style.height = doc.body.scrollHeight + "px";\n          };\n        });\n      case 3:\n        if (false) {}\n        _context.next = 6;\n        return x(ghGist_element_templateObject || (ghGist_element_templateObject = ghGist_element_taggedTemplateLiteral(["<iframe .ref=", " scrolling=\\"no\\"></iframe>"])), ref_n(iframeRef));\n      case 6:\n        params = _context.sent;\n        _context.next = 3;\n        break;\n      case 9:\n      case "end":\n        return _context.stop();\n    }\n  }, _callee, this);\n}));\n;// CONCATENATED MODULE: ./www/src/views/get-started/getStarted.element.tsx\nfunction getStarted_element_typeof(obj) { "@babel/helpers - typeof"; return getStarted_element_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, getStarted_element_typeof(obj); }\nvar getStarted_element_templateObject;\n\nfunction getStarted_element_regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ getStarted_element_regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, "_invoke", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == getStarted_element_typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, "_invoke", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, "throw" === methodName && delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method) || "return" !== methodName && (context.method = "throw", context.arg = new TypeError("The iterator does not provide a \'" + methodName + "\' method")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, "catch": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\nfunction getStarted_element_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }\n\nvar getStartedElement = litView.element()( /*#__PURE__*/getStarted_element_regeneratorRuntime().mark(function _callee() {\n  return getStarted_element_regeneratorRuntime().wrap(function _callee$(_context) {\n    while (1) switch (_context.prev = _context.next) {\n      case 0:\n        if (false) {}\n        _context.next = 3;\n        return x(getStarted_element_templateObject || (getStarted_element_templateObject = getStarted_element_taggedTemplateLiteral(["\\n        <p>\\n          This page will give you an introduction to the way of using", "\\n          <code>web-companions</code> inside some project.\\n        </p>\\n        <p>\\n          Of course, you can use only one library from a list of packages inside", "\\n          <code>web-companions</code> to solve a specific task. But here we will\\n          show you <b>how to create an atomic component</b> that is the general\\n          purpose of <code>web-companions</code> set of tools.\\n        </p>\\n        <p>\\n          We will use", "\\n          <a href=\\"https://www.npmjs.com/package/lit-html\\">lit-html</a> as a", "\\n          <code>render</code> because it\'s a robust and has a good support\\n          inside <code>web-companions</code>. Additionally, for better DX, we\\n          will set up", "\\n          <a href=\\"https://github.com/sumbad/babel-plugin-transform-jsx-to-tt\\">\\n            babel-plugin-transform-jsx-to-tt\\n          </a>\\n          . This <code>babel</code> plugin allows us to write templates with", "\\n          <code>JSX</code> instead of using Tagged Template Literals directly.\\n          For demonstration goal, we will use", "\\n          <a href=\\"https://webpack.js.org/\\">webpack</a>. But of course, you can\\n          use <code>web-companions</code> without bundling at all. Ok, so let\'s\\n          start step by step.\\n        </p>\\n\\n        <section>\\n          <h5>\\n            1. Create <code>npm</code> project and install <code>webpack</code>", "\\n            and <code>babel</code>:\\n          </h5>\\n          <pre>\\n            Run in terminal next commands\\n            <code>\\n              ", "\\n            </code>\\n          </pre>\\n        </section>\\n        <section>\\n          <h5>2. Set up project:</h5>\\n          <pre>\\n            Create <b>webpack.config.js</b> file inside wc-get-started folder\\n            with next content\\n            <code>\\n              ", "\\n            </code>\\n            Create <b>.babelrc.json</b> file inside wc-get-started folder with\\n            next content\\n            <code>\\n              ", "\\n            </code>\\n          </pre>\\n        </section>\\n        <section>\\n          <h5>\\n            3. Install <code>web-companions</code>\\n          </h5>\\n          <pre>\\n            Run in terminal next commands\\n            <code>\\n              ", "\\n            </code>\\n          </pre>\\n        </section>\\n        <section>\\n          <h5>\\n            4. Create your first <code>view component</code>\\n          </h5>\\n          <pre>\\n            Create <b>index.html</b> file inside <b>wc-get-started/src</b>", "\\n            folder with next content\\n            <code>\\n              ", "\\n            </code>\\n            Create <b>index.jsx</b> file inside <b>wc-get-started/src</b> folder\\n            with next content\\n            <code>\\n              ", "\\n            </code>\\n          </pre>\\n        </section>\\n\\n        <section>\\n          <h5>5. Run project locally:</h5>\\n          <pre>\\n            Run in terminal next commands\\n            <code>\\n              ", "\\n            </code>\\n          </pre>\\n        </section>\\n\\n        <p>\\n          Now you can open in a browser url from your terminal. It will show you\\n          a very simple page with only one button.\\n        </p>\\n      "])), " ", " ", " ", " ", " ", " ", " ", " ", "\\nmkdir wc-get-started\\ncd wc-get-started\\nnpm init -y\\nnpm install webpack webpack-cli webpack-dev-server babel-loader @babel/core @babel/preset-env babel-plugin-transform-jsx-to-tt --save-dev\\n              ", "\\nconst path = require(\'path\');\\n\\nmodule.exports = {\\n  mode: \'development\',\\n  entry: {\\n    index: path.join(__dirname, \'src\', \'index.jsx\'),\\n  },\\n  output: {\\n    path: path.join(__dirname, \'dist\'),\\n  },\\n  devServer: {\\n    static: {\\n      directory: path.join(__dirname, \'src\'),\\n    },\\n  },\\n  module: {\\n    rules: [\\n      {\\n        test: /.m?js(x?)$/,\\n        loader: \'babel-loader\',\\n        exclude: /node_modules/,\\n      },\\n    ],\\n  },\\n};\\n              ", "\\n{\\n    \\"presets\\": [\\"@babel/env\\"],\\n    \\"plugins\\": [\\n      [\\n        \\"babel-plugin-transform-jsx-to-tt\\",\\n        {\\n          \\"tag\\": \\"html\\",\\n          \\"import\\": {\\n            \\"module\\": \\"lit-html\\",\\n            \\"export\\": \\"html\\"\\n          },\\n          \\"attributes\\": [\\n            {\\n              \\"preset\\": \\"lit-html\\"\\n            }\\n          ]\\n        }\\n      ]\\n    ]\\n}  \\n              ", "\\nnpm install @web-companions/lit\\n              ", " ", "\\n<!DOCTYPE html>\\n<html lang=\\"en\\">\\n  <head>\\n    <meta charset=\\"UTF-8\\" />\\n    <meta name=\\"viewport\\" content=\\"width=device-width, initial-scale=1.0\\" />\\n    <title>Use web-companions</title>\\n    <script type=\\"module\\" src=\\"/index.js\\"><\/script></head>\\n  </head>\\n  <body>\\n    <app-main></app-main>\\n  </body>\\n</html>\\n              ", "\\nimport { litView } from \'@web-companions/lit\';\\n\\nlitView.element()(function* () {\\n  let counter = 0;\\n\\n  while (true) {\\n    yield (\\n      <>\\n        <h1>\\n          Get started with <code>web-companions</code>\\n        </h1>\\n\\n        <p>This is a simple counter, press the next button to increase value</p>\\n\\n        <button\\n          onclick={() => {\\n            counter++, this.next();\\n          }}\\n        >\\n          Add +1\\n        </button>\\n        {counter}\\n      </>\\n    );\\n  }\\n})(\'app-main\');\\n              ", "\\nnpx webpack serve\\n              ");\n      case 3:\n        _context.next = 0;\n        break;\n      case 5:\n      case "end":\n        return _context.stop();\n    }\n  }, _callee);\n}));\n;// CONCATENATED MODULE: ./www/src/views/introduction/Introduction.element.tsx\nfunction Introduction_element_typeof(obj) { "@babel/helpers - typeof"; return Introduction_element_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, Introduction_element_typeof(obj); }\nvar Introduction_element_templateObject;\n\nfunction Introduction_element_regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ Introduction_element_regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, "_invoke", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == Introduction_element_typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, "_invoke", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, "throw" === methodName && delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method) || "return" !== methodName && (context.method = "throw", context.arg = new TypeError("The iterator does not provide a \'" + methodName + "\' method")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, "catch": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\nfunction Introduction_element_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }\n\nvar introductionElement = litView.element()( /*#__PURE__*/Introduction_element_regeneratorRuntime().mark(function _callee() {\n  return Introduction_element_regeneratorRuntime().wrap(function _callee$(_context) {\n    while (1) switch (_context.prev = _context.next) {\n      case 0:\n        if (false) {}\n        _context.next = 3;\n        return x(Introduction_element_templateObject || (Introduction_element_templateObject = Introduction_element_taggedTemplateLiteral(["\\n        <h5>\\n          Welcome to the <code>web-companions</code> documentation!\\n        </h5>\\n        <p>\\n          At its core, <code>web-companions</code> is a set of tools to simplify\\n          the web development process with", "\\n          <b>\\n            concentration on creating atomic view components using Web\\n            Specifications\\n          </b>\\n          .\\n        </p>\\n        <p>\\n          These libraries are not a framework and not need to learn it\\n          separately. It\'s like <code>innerHtml</code>, but with helpers and\\n          wrappers to make it easier to use Web Specifications and perform\\n          simple, straightforward tasks:\\n        </p>\\n        <ul>\\n          <li>Write native UI components in a clear way.</li>\\n          <li>\\n            No extra knowledge. Learn language, learn specifications and\\n            platforms.\\n          </li>\\n          <li>Without frameworks with minimum of dependencies.</li>\\n        </ul>\\n\\n        <hr>\\n        <h5>A little theory</h5>\\n\\n        <p>In general, any UI component has two things:</p>\\n        <ol>\\n          <li>\\n            Lifecycle \\u2013 to control how a component will be created, updated and\\n            destroyed.\\n          </li>\\n          <li>\\n            Render \\u2013 to visually present a component in a platform, for web it\\n            will be HTML, CSS, SVG.\\n          </li>\\n        </ol>\\n\\n        <pre>\\n          <code>\\n            ", "\\n          </code>\\n        </pre>\\n\\n        <p>\\n          To simplify the development process and increase DX we combined\\n          Lifecycle and Render inside <code>view</code>. A <code>view</code>", "\\n          could be rendered as an HTML element or an HTML node inside an element\\n          in a web page. Any <code>view</code> is building on two parts:", "\\n          <b>lifecycle and render</b>. In turn, the lifecycle is built on", "\\n          <a href=\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator\\">\\n            Generator\\n          </a>", "\\n          and", "\\n          <a href=\\"https://developer.mozilla.org/en-US/docs/Web/API/Web_components#custom_elements_2\\">\\n            Custom elements\\n          </a>\\n          . That\'s all!\\n        </p>\\n\\n        <hr>\\n        <h5>More details</h5>\\n\\n        <p>\\n          To use lifecycle convenient way, it was wrapped inside\\n          <code>@web-companions/gfc</code> package. So that we can just write a\\n          generator function for <code>EG</code> or <code>NG</code> functions,\\n          that will use it inside a custom element. Generator function in JS is\\n          a function that can run it part and return values several times\\n          without rerun the whole function. We create an infinity part that\\n          render a new HTML with updated values each time when we produce them.\\n        </p>\\n\\n        <img alt=\\"Web-companions work schema\\" src=\\"https://raw.githubusercontent.com/sumbad/web-companions/master/doc/schema.png\\" width=\\"100%\\">\\n\\n        <p>\\n          No magic, no compilations, no hacks and hooks. As you can see, it\'s\\n          easy to repeat these libraries using JavaScript generator functions\\n          and Web Specifications.\\n        </p>\\n      "])), " ", "\\n<UI Component> = <Lifecycle> + <Render>;\\n\\n// where:\\n\\n<Lifecycle> = @web-companions/gfc;\\n\\n<Render> =  lit-html | uhtml | hyperHTML | @github/jtml | <any other, even innerHTML if you need something very simple>;\\n            ", " ", " ", " ", " ", " ");\n      case 3:\n        _context.next = 0;\n        break;\n      case 5:\n      case "end":\n        return _context.stop();\n    }\n  }, _callee);\n}));\n;// CONCATENATED MODULE: ./www/src/views/page-content/pageContent.element.tsx\nfunction pageContent_element_typeof(obj) { "@babel/helpers - typeof"; return pageContent_element_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, pageContent_element_typeof(obj); }\nvar pageContent_element_templateObject, pageContent_element_templateObject2, pageContent_element_templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7, _templateObject8, _templateObject9, _templateObject10, _templateObject11, _templateObject12, _templateObject13, _templateObject14, _templateObject15, _templateObject16, _templateObject17, _templateObject18, _templateObject19, _templateObject20;\n\nfunction pageContent_element_regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ pageContent_element_regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, "_invoke", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == pageContent_element_typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, "_invoke", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, "throw" === methodName && delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method) || "return" !== methodName && (context.method = "throw", context.arg = new TypeError("The iterator does not provide a \'" + methodName + "\' method")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, "catch": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\nfunction pageContent_element_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction pageContent_element_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? pageContent_element_ownKeys(Object(source), !0).forEach(function (key) { pageContent_element_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : pageContent_element_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction pageContent_element_defineProperty(obj, key, value) { key = pageContent_element_toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction pageContent_element_toPropertyKey(arg) { var key = pageContent_element_toPrimitive(arg, "string"); return pageContent_element_typeof(key) === "symbol" ? key : String(key); }\nfunction pageContent_element_toPrimitive(input, hint) { if (pageContent_element_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (pageContent_element_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\nfunction pageContent_element_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }\n\n\n\n\n\n\n\n\nvar CounterJtmlElement = counter_element_counterElement("demo-counter-jtml");\nvar CounterLitElement = counterElement("demo-counter-lit");\nvar GhGistElement = ghGistElement("demo-gh-gist");\nvar GetStartedElement = getStartedElement("get-started");\nvar IntroductionElement = introductionElement("companions-introduction");\nvar pageContentElement = litView.element({\n  props: {\n    activePage: utils_p_p.req()\n  }\n})( /*#__PURE__*/pageContent_element_regeneratorRuntime().mark(function _callee(params) {\n  var _this = this;\n  var demo, selectedItem, handleSelectedItem, MenuTemplateRenders, _demo$menu, _demo, _demo$gists, _demo2;\n  return pageContent_element_regeneratorRuntime().wrap(function _callee$(_context) {\n    while (1) switch (_context.prev = _context.next) {\n      case 0:\n        demo = {\n          title: function title() {\n            return x(pageContent_element_templateObject || (pageContent_element_templateObject = pageContent_element_taggedTemplateLiteral([""])));\n          },\n          content: function content() {\n            return x(pageContent_element_templateObject2 || (pageContent_element_templateObject2 = pageContent_element_taggedTemplateLiteral([""])));\n          },\n          menu: function menu() {\n            return x(pageContent_element_templateObject3 || (pageContent_element_templateObject3 = pageContent_element_taggedTemplateLiteral([""])));\n          },\n          gists: function gists() {\n            return x(_templateObject4 || (_templateObject4 = pageContent_element_taggedTemplateLiteral([""])));\n          }\n        };\n        selectedItem = null;\n        handleSelectedItem = function handleSelectedItem(item) {\n          return function () {\n            selectedItem = item;\n            _this.next();\n          };\n        };\n        MenuTemplateRenders = function MenuTemplateRenders() {\n          return x(_templateObject5 || (_templateObject5 = pageContent_element_taggedTemplateLiteral(["<nav class=\\"navbar\\">\\n      <div class=\\"container\\">\\n        <ul class=\\"navbar-list\\">\\n          <li class=\\"navbar-item\\">\\n            <a class=\\"navbar-link\\" @click=", ">\\n              jtml render\\n            </a>\\n            <a class=\\"navbar-link\\" @click=", ">\\n              lit-html render\\n            </a>\\n          </li>\\n        </ul>\\n      </div>\\n    </nav>"])), handleSelectedItem("jtml"), handleSelectedItem("lit"));\n        };\n      case 4:\n        if (false) {}\n        _context.t0 = params.activePage;\n        _context.next = _context.t0 === "introduction" ? 8 : _context.t0 === "get_started" ? 10 : _context.t0 === "counter" ? 12 : 15;\n        break;\n      case 8:\n        demo = {\n          title: function title() {\n            return x(_templateObject6 || (_templateObject6 = pageContent_element_taggedTemplateLiteral(["<h1>\\uD83E\\uDD14 Introduction</h1>"])));\n          },\n          content: function content() {\n            return x(_templateObject7 || (_templateObject7 = pageContent_element_taggedTemplateLiteral(["<companions-introduction></companions-introduction>"])));\n          }\n        };\n        return _context.abrupt("break", 17);\n      case 10:\n        demo = {\n          title: function title() {\n            return x(_templateObject8 || (_templateObject8 = pageContent_element_taggedTemplateLiteral(["<h1>\\uD83C\\uDFAC Get started</h1>"])));\n          },\n          content: function content() {\n            return x(_templateObject9 || (_templateObject9 = pageContent_element_taggedTemplateLiteral(["<get-started></get-started>"])));\n          }\n        };\n        return _context.abrupt("break", 17);\n      case 12:\n        demo = pageContent_element_objectSpread(pageContent_element_objectSpread({}, demo), {}, {\n          title: function title() {\n            return x(_templateObject10 || (_templateObject10 = pageContent_element_taggedTemplateLiteral(["<h2>\\u25B6\\uFE0F Demo. Counter</h2>"])));\n          },\n          // menu: MenuTemplateRenders,\n          content: function content() {\n            return x(_templateObject11 || (_templateObject11 = pageContent_element_taggedTemplateLiteral(["<demo-counter-jtml .msg=", "></demo-counter-jtml>"])), "Counter Element");\n          },\n          gists: function gists() {\n            return x(_templateObject12 || (_templateObject12 = pageContent_element_taggedTemplateLiteral(["<demo-gh-gist .sharedLink=", "></demo-gh-gist>"])), "https://gist.github.com/sumbad/7d0ee6ad3f9282cfd3c99cb6ddbedc6b");\n          }\n        });\n        if (selectedItem === "lit") {\n          demo.content = function () {\n            return x(_templateObject13 || (_templateObject13 = pageContent_element_taggedTemplateLiteral(["<demo-counter-lit .msg=", "></demo-counter-lit>"])), "Counter Element");\n          };\n          demo.gists = function () {\n            return x(_templateObject14 || (_templateObject14 = pageContent_element_taggedTemplateLiteral(["<demo-gh-gist .sharedLink=", "></demo-gh-gist>"])), "https://gist.github.com/sumbad/7d0ee6ad3f9282cfd3c99cb6ddbedc6b");\n          };\n        }\n        return _context.abrupt("break", 17);\n      case 15:\n        demo = {\n          title: function title() {\n            return x(_templateObject15 || (_templateObject15 = pageContent_element_taggedTemplateLiteral([""])));\n          },\n          content: function content() {\n            return x(_templateObject16 || (_templateObject16 = pageContent_element_taggedTemplateLiteral([""])));\n          },\n          menu: function menu() {\n            return x(_templateObject17 || (_templateObject17 = pageContent_element_taggedTemplateLiteral([""])));\n          },\n          gists: function gists() {\n            return x(_templateObject18 || (_templateObject18 = pageContent_element_taggedTemplateLiteral([""])));\n          }\n        };\n        return _context.abrupt("break", 17);\n      case 17:\n        _context.next = 19;\n        return x(_templateObject19 || (_templateObject19 = pageContent_element_taggedTemplateLiteral(["<div class=\\"page-content\\">\\n        ", "\\n        ", "\\n        ", "\\n        ", "\\n      </div>"])), demo.title(), (_demo$menu = (_demo = demo).menu) === null || _demo$menu === void 0 ? void 0 : _demo$menu.call(_demo), demo.content(), is(demo.gists != null, x(_templateObject20 || (_templateObject20 = pageContent_element_taggedTemplateLiteral(["\\n            <hr>\\n            <hr>\\n            <h3>\\uD83D\\uDEE0\\uFE0F Source code</h3>\\n            ", "\\n          "])), (_demo$gists = (_demo2 = demo).gists) === null || _demo$gists === void 0 ? void 0 : _demo$gists.call(_demo2))));\n      case 19:\n        params = _context.sent;\n        _context.next = 4;\n        break;\n      case 22:\n      case "end":\n        return _context.stop();\n    }\n  }, _callee);\n}));\n;// CONCATENATED MODULE: ./www/src/main.tsx\nfunction main_typeof(obj) { "@babel/helpers - typeof"; return main_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, main_typeof(obj); }\nvar main_templateObject, main_templateObject2;\n\nfunction main_regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ main_regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, "_invoke", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == main_typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, "_invoke", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, "throw" === methodName && delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method) || "return" !== methodName && (context.method = "throw", context.arg = new TypeError("The iterator does not provide a \'" + methodName + "\' method")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, "catch": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\nfunction main_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }\n\n\n\n\n\nvar SidemenuElement = sidemenuElement("demo-sidemenu");\nvar PageContentElement = pageContentElement("demo-page-content");\nvar gitHubIcon = litView.node( /*#__PURE__*/main_regeneratorRuntime().mark(function _callee() {\n  return main_regeneratorRuntime().wrap(function _callee$(_context) {\n    while (1) switch (_context.prev = _context.next) {\n      case 0:\n        if (false) {}\n        _context.next = 3;\n        return x(main_templateObject || (main_templateObject = main_taggedTemplateLiteral(["<svg xmlns=\\"http://www.w3.org/2000/svg\\" class=\\"icon icon-tabler icon-tabler-brand-github\\" width=\\"24\\" height=\\"24\\" viewBox=\\"0 0 24 24\\" stroke-width=\\"1\\" stroke=\\"currentColor\\" fill=\\"none\\" stroke-linecap=\\"round\\" stroke-linejoin=\\"round\\">\\n        <path stroke=\\"none\\" d=\\"M0 0h24v24H0z\\" fill=\\"none\\"></path>\\n        <path d=\\"M9 19c-4.3 1.4 -4.3 -2.5 -6 -3m12 5v-3.5c0 -1 .1 -1.4 -.5 -2c2.8 -.3 5.5 -1.4 5.5 -6a4.6 4.6 0 0 0 -1.3 -3.2a4.2 4.2 0 0 0 -.1 -3.2s-1.1 -.3 -3.5 1.3a12.3 12.3 0 0 0 -6.2 0c-2.4 -1.6 -3.5 -1.3 -3.5 -1.3a4.2 4.2 0 0 0 -.1 3.2a4.6 4.6 0 0 0 -1.3 3.2c0 4.6 2.7 5.7 5.5 6c-.6 .6 -.6 1.2 -.5 2v3.5\\"></path>\\n      </svg>"])));\n      case 3:\n        _context.next = 0;\n        break;\n      case 5:\n      case "end":\n        return _context.stop();\n    }\n  }, _callee);\n}));\nvar menu = {\n  introduction: {\n    label: "Introduction",\n    category: true,\n    available: true\n  },\n  get_started: {\n    label: "Get started",\n    category: true,\n    available: true\n  },\n  demo: {\n    label: "Demo",\n    category: true\n  },\n  counter: {\n    label: "Counter",\n    parent: "demo",\n    available: true\n  }\n};\n/**\n * ROOT element\n */\nlitView.element()( /*#__PURE__*/main_regeneratorRuntime().mark(function _callee2() {\n  var _this = this;\n  var activePage, onchangeActive;\n  return main_regeneratorRuntime().wrap(function _callee2$(_context2) {\n    while (1) switch (_context2.prev = _context2.next) {\n      case 0:\n        setStyle(main/* default */.A, this.container);\n        activePage = "introduction";\n        onchangeActive = function onchangeActive(event) {\n          console.log(event.detail.key);\n          activePage = event.detail.key;\n          _this.next();\n        };\n      case 3:\n        if (false) {}\n        _context2.next = 6;\n        return x(main_templateObject2 || (main_templateObject2 = main_taggedTemplateLiteral(["\\n        <demo-sidemenu searchPlaceholder=\\"Search\\" .data=", " activeMenuItem=\\"introduction\\" @changeActive=", ">\\n          <footer>\\n            <a href=\\"https://github.com/sumbad/web-companions\\">\\n              ", " web-companions\\n            </a>\\n          </footer>\\n        </demo-sidemenu>\\n\\n        <div class=\\"demo-content\\">\\n          <demo-page-content .activePage=", "></demo-page-content>\\n        </div>\\n      "])), menu, onchangeActive, gitHubIcon()(), activePage);\n      case 6:\n        _context2.next = 3;\n        break;\n      case 8:\n      case "end":\n        return _context2.stop();\n    }\n  }, _callee2, this);\n}))("www-main");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///216\n')},820:(module,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(601);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(314);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _node_modules_css_loader_dist_cjs_js_ruleSet_1_rules_2_use_0_node_modules_postcss_loader_dist_cjs_js_ruleSet_1_rules_2_use_1_skeleton_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(466);\n/* harmony import */ var _node_modules_css_loader_dist_cjs_js_ruleSet_1_rules_2_use_0_node_modules_postcss_loader_dist_cjs_js_ruleSet_1_rules_2_use_1_navbar_css__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(785);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(417);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_4__);\n// Imports\n\n\n\n\n\nvar ___CSS_LOADER_URL_IMPORT_0___ = new URL(/* asset import */ __webpack_require__(897), __webpack_require__.b);\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n___CSS_LOADER_EXPORT___.i(_node_modules_css_loader_dist_cjs_js_ruleSet_1_rules_2_use_0_node_modules_postcss_loader_dist_cjs_js_ruleSet_1_rules_2_use_1_skeleton_css__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .A);\n___CSS_LOADER_EXPORT___.i(_node_modules_css_loader_dist_cjs_js_ruleSet_1_rules_2_use_0_node_modules_postcss_loader_dist_cjs_js_ruleSet_1_rules_2_use_1_navbar_css__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .A);\nvar ___CSS_LOADER_URL_REPLACEMENT_0___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_4___default()(___CSS_LOADER_URL_IMPORT_0___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `@font-face {\n  font-family: Raleway;\n  src: url(${___CSS_LOADER_URL_REPLACEMENT_0___}) format("truetype-variations");\n}\n\nbody {\n  margin: 0;\n  padding: 0;\n}\n\n.demo-content {\n  padding: 0;\n  margin: 0;\n  height: 100vh;\n  overflow: auto;\n  margin-left: 200px;\n}\n\nfooter {\n  display: flex;\n  height: 100%;\n  flex-direction: column;\n  justify-content: flex-end;\n  padding: 5px;\n}\n\nfooter a {\n    margin-left: 10px;\n    font-weight: 100;\n    text-decoration: unset;\n  }\n\nfooter a svg {\n      vertical-align: bottom;\n    }\n\n.page-content {\n  padding: 20px;\n}`, ""]);\n// Exports\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODIwLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3dlYi1jb21wYW5pb25zLy4vd3d3L3NyYy9tYWluLmNzcz85NTVmIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9OT19TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvbm9Tb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BVF9SVUxFX0lNUE9SVF8wX19fIGZyb20gXCItIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzJdLnVzZVswXSEuLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbMl0udXNlWzFdIS4vc2tlbGV0b24uY3NzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BVF9SVUxFX0lNUE9SVF8xX19fIGZyb20gXCItIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzJdLnVzZVswXSEuLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbMl0udXNlWzFdIS4vbmF2YmFyLmNzc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9nZXRVcmwuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMF9fXyA9IG5ldyBVUkwoXCIuLi9wdWJsaWMvZm9udHMvUmFsZXdheS9SYWxld2F5LVZhcmlhYmxlRm9udF93Z2h0LnR0ZlwiLCBpbXBvcnQubWV0YS51cmwpO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX05PX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18uaShfX19DU1NfTE9BREVSX0FUX1JVTEVfSU1QT1JUXzBfX18pO1xuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18uaShfX19DU1NfTE9BREVSX0FUX1JVTEVfSU1QT1JUXzFfX18pO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzBfX18gPSBfX19DU1NfTE9BREVSX0dFVF9VUkxfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8wX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBgQGZvbnQtZmFjZSB7XG4gIGZvbnQtZmFtaWx5OiBSYWxld2F5O1xuICBzcmM6IHVybCgke19fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzBfX199KSBmb3JtYXQoXCJ0cnVldHlwZS12YXJpYXRpb25zXCIpO1xufVxuXG5ib2R5IHtcbiAgbWFyZ2luOiAwO1xuICBwYWRkaW5nOiAwO1xufVxuXG4uZGVtby1jb250ZW50IHtcbiAgcGFkZGluZzogMDtcbiAgbWFyZ2luOiAwO1xuICBoZWlnaHQ6IDEwMHZoO1xuICBvdmVyZmxvdzogYXV0bztcbiAgbWFyZ2luLWxlZnQ6IDIwMHB4O1xufVxuXG5mb290ZXIge1xuICBkaXNwbGF5OiBmbGV4O1xuICBoZWlnaHQ6IDEwMCU7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gIGp1c3RpZnktY29udGVudDogZmxleC1lbmQ7XG4gIHBhZGRpbmc6IDVweDtcbn1cblxuZm9vdGVyIGEge1xuICAgIG1hcmdpbi1sZWZ0OiAxMHB4O1xuICAgIGZvbnQtd2VpZ2h0OiAxMDA7XG4gICAgdGV4dC1kZWNvcmF0aW9uOiB1bnNldDtcbiAgfVxuXG5mb290ZXIgYSBzdmcge1xuICAgICAgdmVydGljYWwtYWxpZ246IGJvdHRvbTtcbiAgICB9XG5cbi5wYWdlLWNvbnRlbnQge1xuICBwYWRkaW5nOiAyMHB4O1xufWAsIFwiXCJdKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///820\n')},785:(module,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(601);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(314);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `.navbar {\n  display: none;\n  margin-bottom: 20px;\n}\n\n/* Larger than tablet */\n\n/* @media (width >= 750px) { */\n\n/* Navbar */\n.navbar + .docs-section {\n  border-top-width: 0;\n}\n\n.navbar,\n.navbar-spacer {\n  display: block;\n  width: 100%;\n  height: 6.5rem;\n  background: #fff;\n  z-index: 99;\n  border-top: 1px solid #eee;\n  border-bottom: 1px solid #eee;\n}\n\n.navbar-spacer {\n  display: none;\n}\n\n.navbar > .container {\n  width: 100%;\n}\n\n.navbar-list {\n  list-style: none;\n  margin-bottom: 0;\n  padding-left: 0;\n  margin-top: 0;\n}\n\n.navbar-item {\n  position: relative;\n  float: left;\n  margin-bottom: 0;\n}\n\n.navbar-link {\n  text-transform: uppercase;\n  font-size: 11px;\n  font-weight: 600;\n  letter-spacing: 0.2rem;\n  margin-right: 35px;\n  text-decoration: none;\n  line-height: 6.5rem;\n  color: #222;\n  cursor: pointer;\n}\n\n.navbar-link.active {\n  color: #33c3f0;\n}\n\n.has-docked-nav .navbar {\n  position: fixed;\n  top: 0;\n  left: 0;\n}\n\n.has-docked-nav .navbar-spacer {\n  display: block;\n}\n\n/* Re-overiding the width 100% declaration to match size of % based container */\n.has-docked-nav .navbar > .container {\n  width: 80%;\n}\n\n/* } */\n`, ""]);\n// Exports\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzg1LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2ViLWNvbXBhbmlvbnMvLi93d3cvc3JjL25hdmJhci5jc3M/ODU2YSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfTk9fU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL25vU291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX05PX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIGAubmF2YmFyIHtcbiAgZGlzcGxheTogbm9uZTtcbiAgbWFyZ2luLWJvdHRvbTogMjBweDtcbn1cblxuLyogTGFyZ2VyIHRoYW4gdGFibGV0ICovXG5cbi8qIEBtZWRpYSAod2lkdGggPj0gNzUwcHgpIHsgKi9cblxuLyogTmF2YmFyICovXG4ubmF2YmFyICsgLmRvY3Mtc2VjdGlvbiB7XG4gIGJvcmRlci10b3Atd2lkdGg6IDA7XG59XG5cbi5uYXZiYXIsXG4ubmF2YmFyLXNwYWNlciB7XG4gIGRpc3BsYXk6IGJsb2NrO1xuICB3aWR0aDogMTAwJTtcbiAgaGVpZ2h0OiA2LjVyZW07XG4gIGJhY2tncm91bmQ6ICNmZmY7XG4gIHotaW5kZXg6IDk5O1xuICBib3JkZXItdG9wOiAxcHggc29saWQgI2VlZTtcbiAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICNlZWU7XG59XG5cbi5uYXZiYXItc3BhY2VyIHtcbiAgZGlzcGxheTogbm9uZTtcbn1cblxuLm5hdmJhciA+IC5jb250YWluZXIge1xuICB3aWR0aDogMTAwJTtcbn1cblxuLm5hdmJhci1saXN0IHtcbiAgbGlzdC1zdHlsZTogbm9uZTtcbiAgbWFyZ2luLWJvdHRvbTogMDtcbiAgcGFkZGluZy1sZWZ0OiAwO1xuICBtYXJnaW4tdG9wOiAwO1xufVxuXG4ubmF2YmFyLWl0ZW0ge1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIGZsb2F0OiBsZWZ0O1xuICBtYXJnaW4tYm90dG9tOiAwO1xufVxuXG4ubmF2YmFyLWxpbmsge1xuICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xuICBmb250LXNpemU6IDExcHg7XG4gIGZvbnQtd2VpZ2h0OiA2MDA7XG4gIGxldHRlci1zcGFjaW5nOiAwLjJyZW07XG4gIG1hcmdpbi1yaWdodDogMzVweDtcbiAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xuICBsaW5lLWhlaWdodDogNi41cmVtO1xuICBjb2xvcjogIzIyMjtcbiAgY3Vyc29yOiBwb2ludGVyO1xufVxuXG4ubmF2YmFyLWxpbmsuYWN0aXZlIHtcbiAgY29sb3I6ICMzM2MzZjA7XG59XG5cbi5oYXMtZG9ja2VkLW5hdiAubmF2YmFyIHtcbiAgcG9zaXRpb246IGZpeGVkO1xuICB0b3A6IDA7XG4gIGxlZnQ6IDA7XG59XG5cbi5oYXMtZG9ja2VkLW5hdiAubmF2YmFyLXNwYWNlciB7XG4gIGRpc3BsYXk6IGJsb2NrO1xufVxuXG4vKiBSZS1vdmVyaWRpbmcgdGhlIHdpZHRoIDEwMCUgZGVjbGFyYXRpb24gdG8gbWF0Y2ggc2l6ZSBvZiAlIGJhc2VkIGNvbnRhaW5lciAqL1xuLmhhcy1kb2NrZWQtbmF2IC5uYXZiYXIgPiAuY29udGFpbmVyIHtcbiAgd2lkdGg6IDgwJTtcbn1cblxuLyogfSAqL1xuYCwgXCJcIl0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///785\n')},466:(module,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(601);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(314);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `/*\n* Skeleton V2.0.4\n* Copyright 2014, Dave Gamache\n* www.getskeleton.com\n* Free to use under the MIT license.\n* http://www.opensource.org/licenses/mit-license.php\n* 12/29/2014\n*/\n\n\n/* Table of contents\n––––––––––––––––––––––––––––––––––––––––––––––––––\n- Grid\n- Base Styles\n- Typography\n- Links\n- Buttons\n- Forms\n- Lists\n- Code\n- Tables\n- Spacing\n- Utilities\n- Clearing\n- Media Queries\n*/\n\n\n/* Grid\n–––––––––––––––––––––––––––––––––––––––––––––––––– */\n.container {\n    position: relative;\n    width: 100%;\n    max-width: 960px;\n    margin: 0 auto;\n    padding: 0 20px;\n    box-sizing: border-box; }\n\n  .column,\n  .columns {\n    width: 100%;\n    float: left;\n    box-sizing: border-box; }\n  \n  /* For devices larger than 400px */\n  @media (width >= 400px) {\n    .container {\n      width: 85%;\n      padding: 0; }\n  }\n  \n  /* For devices larger than 550px */\n  @media (width >= 550px) {\n    .container {\n      width: 80%; }\n\n    .column,\n    .columns {\n      margin-left: 4%; }\n\n    .column:first-child,\n    .columns:first-child {\n      margin-left: 0; }\n  \n    .one.column,\n    .one.columns                    { width: 4.66666666667%; }\n    .two.columns                    { width: 13.3333333333%; }\n    .three.columns                  { width: 22%;            }\n    .four.columns                   { width: 30.6666666667%; }\n    .five.columns                   { width: 39.3333333333%; }\n    .six.columns                    { width: 48%;            }\n    .seven.columns                  { width: 56.6666666667%; }\n    .eight.columns                  { width: 65.3333333333%; }\n    .nine.columns                   { width: 74.0%;          }\n    .ten.columns                    { width: 82.6666666667%; }\n    .eleven.columns                 { width: 91.3333333333%; }\n    .twelve.columns                 { width: 100%; margin-left: 0; }\n  \n    .one-third.column               { width: 30.6666666667%; }\n    .two-thirds.column              { width: 65.3333333333%; }\n  \n    .one-half.column                { width: 48%; }\n  \n    /* Offsets */\n    .offset-by-one.column,\n    .offset-by-one.columns          { margin-left: 8.66666666667%; }\n\n    .offset-by-two.column,\n    .offset-by-two.columns          { margin-left: 17.3333333333%; }\n\n    .offset-by-three.column,\n    .offset-by-three.columns        { margin-left: 26%;            }\n\n    .offset-by-four.column,\n    .offset-by-four.columns         { margin-left: 34.6666666667%; }\n\n    .offset-by-five.column,\n    .offset-by-five.columns         { margin-left: 43.3333333333%; }\n\n    .offset-by-six.column,\n    .offset-by-six.columns          { margin-left: 52%;            }\n\n    .offset-by-seven.column,\n    .offset-by-seven.columns        { margin-left: 60.6666666667%; }\n\n    .offset-by-eight.column,\n    .offset-by-eight.columns        { margin-left: 69.3333333333%; }\n\n    .offset-by-nine.column,\n    .offset-by-nine.columns         { margin-left: 78.0%;          }\n\n    .offset-by-ten.column,\n    .offset-by-ten.columns          { margin-left: 86.6666666667%; }\n\n    .offset-by-eleven.column,\n    .offset-by-eleven.columns       { margin-left: 95.3333333333%; }\n  \n    .offset-by-one-third.column,\n    .offset-by-one-third.columns    { margin-left: 34.6666666667%; }\n\n    .offset-by-two-thirds.column,\n    .offset-by-two-thirds.columns   { margin-left: 69.3333333333%; }\n  \n    .offset-by-one-half.column,\n    .offset-by-one-half.columns     { margin-left: 52%; }\n  \n  }\n  \n  \n  /* Base Styles\n  –––––––––––––––––––––––––––––––––––––––––––––––––– */\n\n  /* NOTE\n  html is set to 62.5% so that all the REM measurements throughout Skeleton\n  are based on 10px sizing. So basically 1.5rem = 15px :) */\n  html {\n    font-size: 62.5%; }\n\n  body {\n    font-size: 1.5em; /* currently ems cause chrome bug misinterpreting rems on body element */\n    line-height: 1.6;\n    font-weight: 400;\n    font-family: Raleway, HelveticaNeue, "Helvetica Neue", Helvetica, Arial, sans-serif;\n    color: #222; }\n  \n  \n  /* Typography\n  –––––––––––––––––––––––––––––––––––––––––––––––––– */\n  h1, h2, h3, h4, h5, h6 {\n    margin-top: 0;\n    margin-bottom: 2rem;\n    font-weight: 300; }\n  h1 { font-size: 4.0rem; line-height: 1.2;  letter-spacing: -.1rem;}\n  h2 { font-size: 3.6rem; line-height: 1.25; letter-spacing: -.1rem; }\n  h3 { font-size: 3.0rem; line-height: 1.3;  letter-spacing: -.1rem; }\n  h4 { font-size: 2.4rem; line-height: 1.35; letter-spacing: -.08rem; }\n  h5 { font-size: 1.8rem; line-height: 1.5;  letter-spacing: -.05rem; }\n  h6 { font-size: 1.5rem; line-height: 1.6;  letter-spacing: 0; }\n  \n  /* Larger than phablet */\n  @media (width >= 550px) {\n    h1 { font-size: 5.0rem; }\n    h2 { font-size: 4.2rem; }\n    h3 { font-size: 3.6rem; }\n    h4 { font-size: 3.0rem; }\n    h5 { font-size: 2.4rem; }\n    h6 { font-size: 1.5rem; }\n  }\n  \n  p {\n    margin-top: 0; }\n  \n  \n  /* Links\n  –––––––––––––––––––––––––––––––––––––––––––––––––– */\n  a {\n    color: #1EAEDB; }\n\n  a:hover {\n    color: #0FA0CE; }\n  \n  \n  /* Buttons\n  –––––––––––––––––––––––––––––––––––––––––––––––––– */\n  .button,\n  button,\n  input[type="submit"],\n  input[type="reset"],\n  input[type="button"] {\n    display: inline-block;\n    height: 38px;\n    padding: 0 30px;\n    color: #555;\n    text-align: center;\n    font-size: 11px;\n    font-weight: 600;\n    line-height: 38px;\n    letter-spacing: .1rem;\n    text-transform: uppercase;\n    text-decoration: none;\n    white-space: nowrap;\n    background-color: transparent;\n    border-radius: 4px;\n    border: 1px solid #bbb;\n    cursor: pointer;\n    box-sizing: border-box; }\n\n  .button:hover,\n  button:hover,\n  input[type="submit"]:hover,\n  input[type="reset"]:hover,\n  input[type="button"]:hover,\n  .button:focus,\n  button:focus,\n  input[type="submit"]:focus,\n  input[type="reset"]:focus,\n  input[type="button"]:focus {\n    color: #333;\n    border-color: #888;\n    outline: 0; }\n\n  .button.button-primary,\n  button.button-primary,\n  input[type="submit"].button-primary,\n  input[type="reset"].button-primary,\n  input[type="button"].button-primary {\n    color: #FFF;\n    background-color: #33C3F0;\n    border-color: #33C3F0; }\n\n  .button.button-primary:hover,\n  button.button-primary:hover,\n  input[type="submit"].button-primary:hover,\n  input[type="reset"].button-primary:hover,\n  input[type="button"].button-primary:hover,\n  .button.button-primary:focus,\n  button.button-primary:focus,\n  input[type="submit"].button-primary:focus,\n  input[type="reset"].button-primary:focus,\n  input[type="button"].button-primary:focus {\n    color: #FFF;\n    background-color: #1EAEDB;\n    border-color: #1EAEDB; }\n  \n  \n  /* Forms\n  –––––––––––––––––––––––––––––––––––––––––––––––––– */\n  input[type="email"],\n  input[type="number"],\n  input[type="search"],\n  input[type="text"],\n  input[type="tel"],\n  input[type="url"],\n  input[type="password"],\n  textarea,\n  select {\n    height: 38px;\n    padding: 6px 10px; /* The 6px vertically centers text on FF, ignored by Webkit */\n    background-color: #fff;\n    border: 1px solid #D1D1D1;\n    border-radius: 4px;\n    box-shadow: none;\n    box-sizing: border-box; }\n\n  /* Removes awkward default styles on some inputs for iOS */\n  input[type="email"],\n  input[type="number"],\n  input[type="search"],\n  input[type="text"],\n  input[type="tel"],\n  input[type="url"],\n  input[type="password"],\n  textarea {\n    appearance: none;\n       appearance: none;\n            appearance: none; }\n\n  textarea {\n    min-height: 65px;\n    padding-top: 6px;\n    padding-bottom: 6px; }\n\n  input[type="email"]:focus,\n  input[type="number"]:focus,\n  input[type="search"]:focus,\n  input[type="text"]:focus,\n  input[type="tel"]:focus,\n  input[type="url"]:focus,\n  input[type="password"]:focus,\n  textarea:focus,\n  select:focus {\n    border: 1px solid #33C3F0;\n    outline: 0; }\n\n  label,\n  legend {\n    display: block;\n    margin-bottom: .5rem;\n    font-weight: 600; }\n\n  fieldset {\n    padding: 0;\n    border-width: 0; }\n\n  input[type="checkbox"],\n  input[type="radio"] {\n    display: inline; }\n\n  label > .label-body {\n    display: inline-block;\n    margin-left: .5rem;\n    font-weight: normal; }\n  \n  \n  /* Lists\n  –––––––––––––––––––––––––––––––––––––––––––––––––– */\n  ul {\n    list-style: circle inside; }\n\n  ol {\n    list-style: decimal inside; }\n\n  ol, ul {\n    padding-left: 0;\n    margin-top: 0; }\n\n  ul ul,\n  ul ol,\n  ol ol,\n  ol ul {\n    margin: 1.5rem 0 1.5rem 3rem;\n    font-size: 90%; }\n\n  li {\n    margin-bottom: 1rem; }\n  \n  \n  /* Code\n  –––––––––––––––––––––––––––––––––––––––––––––––––– */\n  code {\n    padding: .2rem .5rem;\n    margin: 0 .2rem;\n    font-size: 90%;\n    white-space: nowrap;\n    background: #F1F1F1;\n    border: 1px solid #E1E1E1;\n    border-radius: 4px; }\n\n  pre > code {\n    display: block;\n    padding: 1rem 1.5rem;\n    white-space: pre; }\n  \n  \n  /* Tables\n  –––––––––––––––––––––––––––––––––––––––––––––––––– */\n  th,\n  td {\n    padding: 12px 15px;\n    text-align: left;\n    border-bottom: 1px solid #E1E1E1; }\n\n  th:first-child,\n  td:first-child {\n    padding-left: 0; }\n\n  th:last-child,\n  td:last-child {\n    padding-right: 0; }\n  \n  \n  /* Spacing\n  –––––––––––––––––––––––––––––––––––––––––––––––––– */\n  button,\n  .button {\n    margin-bottom: 1rem; }\n\n  input,\n  textarea,\n  select,\n  fieldset {\n    margin-bottom: 1.5rem; }\n\n  pre,\n  blockquote,\n  dl,\n  figure,\n  table,\n  p,\n  ul,\n  ol,\n  form {\n    margin-bottom: 2.5rem; }\n  \n  \n  /* Utilities\n  –––––––––––––––––––––––––––––––––––––––––––––––––– */\n  .u-full-width {\n    width: 100%;\n    box-sizing: border-box; }\n\n  .u-max-full-width {\n    max-width: 100%;\n    box-sizing: border-box; }\n\n  .u-pull-right {\n    float: right; }\n\n  .u-pull-left {\n    float: left; }\n  \n  \n  /* Misc\n  –––––––––––––––––––––––––––––––––––––––––––––––––– */\n  hr {\n    margin-top: 3rem;\n    margin-bottom: 3.5rem;\n    border-width: 0;\n    border-top: 1px solid #E1E1E1; }\n  \n  \n  /* Clearing\n  –––––––––––––––––––––––––––––––––––––––––––––––––– */\n  \n  /* Self Clearing Goodness */\n  .container::after,\n  .row::after,\n  .u-cf {\n    content: "";\n    display: table;\n    clear: both; }\n  \n  \n  /* Media Queries\n  –––––––––––––––––––––––––––––––––––––––––––––––––– */\n\n  /*\n  Note: The best way to structure the use of media queries is to create the queries\n  near the relevant code. For example, if you wanted to change the styles for buttons\n  on small devices, paste the mobile query code up in the buttons section and style it\n  there.\n  */\n  \n  \n  /* Larger than mobile */\n  @media (width >= 400px) {}\n  \n  /* Larger than phablet (also point when grid becomes active) */\n  @media (width >= 550px) {}\n  \n  /* Larger than tablet */\n  @media (width >= 750px) {}\n  \n  /* Larger than desktop */\n  @media (width >= 1000px) {}\n  \n  /* Larger than Desktop HD */\n  @media (width >= 1200px) {}`, ""]);\n// Exports\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///466\n')},396:(module,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(601);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(314);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `iframe {\n  width: 100%;\n  height: 0;\n  border: none;\n}`, ""]);\n// Exports\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzk2LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93ZWItY29tcGFuaW9ucy8uL3d3dy9zcmMvdmlld3MvZ2gtZ2lzdC9naEdpc3QuY3NzP2E0MWMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX05PX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9ub1NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9OT19TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBgaWZyYW1lIHtcbiAgd2lkdGg6IDEwMCU7XG4gIGhlaWdodDogMDtcbiAgYm9yZGVyOiBub25lO1xufWAsIFwiXCJdKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///396\n')},552:(module,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(601);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(314);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `.gist-meta {\n  pointer-events: none;\n  font-size: 0 !important;\n}\n\n.gist-meta :nth-child(2) {\n    font-size: 12px;\n  }\n\n.gist-data {\n  max-height: 400px;\n}\n`, ""]);\n// Exports\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTUyLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2ViLWNvbXBhbmlvbnMvLi93d3cvc3JjL3ZpZXdzL2doLWdpc3QvZ2hHaXN0SWZyYW1lLmNzcz9iMTc2Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9OT19TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvbm9Tb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfTk9fU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgYC5naXN0LW1ldGEge1xuICBwb2ludGVyLWV2ZW50czogbm9uZTtcbiAgZm9udC1zaXplOiAwICFpbXBvcnRhbnQ7XG59XG5cbi5naXN0LW1ldGEgOm50aC1jaGlsZCgyKSB7XG4gICAgZm9udC1zaXplOiAxMnB4O1xuICB9XG5cbi5naXN0LWRhdGEge1xuICBtYXgtaGVpZ2h0OiA0MDBweDtcbn1cbmAsIFwiXCJdKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///552\n')},663:(module,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(601);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(314);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `.insum-menu-category {\n    transition: all 0.4s;\n\n    /* // input:checked {\n    //   ~.insum-menu-category__link {\n    //     animation: moveout 0.4s, hide 0s infinite;animationanimationanimationanimationanimationanimationanimation\n    //     animation-delay: 0s, 0.4s\n    //animation-delayanimation-delayanimation-delayanimation-delayanimation-delayanimation-delayanimation-delay   }\n    // } */\n  }\n\n  .insum-menu-category input {\n      display: none;\n    }\n\n  .insum-menu-category_hide {\n    max-height: 0;\n    transform: translateX(-50px);\n    opacity: 0;\n  }\n\n  .insum-menu-category__title {\n    display: block; \n    height: 40px;\n    padding-left: 10px;\n    user-select: none;\n    line-height: 40px;\n\n    /* // &:hover {\n    //   cursor: pointer;cursorcursorcursorcursorcursorcursor\n    // } */\n}\n\n.insum-menu-category__link {\n    height: 25px;\n    max-height: 30px;\n    padding-top: 10px;\n    padding-left: 30px;\n    user-select: none;\n    transition: 0.4s all;\n    transform: translateX(0);\n    opacity: 1;\n    font-size: 13px;\n  }\n\n  .insum-menu-category__link_hide {\n    max-height: 0;\n    margin: 0;\n    padding: 0;\n    transform: translateX(-50px);\n    opacity: 0;\n  }\n\n  .insum-menu-category__link_active {\n    font-size: medium;\n    color: var(--insum-sidemenu__font-accent-color);\n  }`, ""]);\n// Exports\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjYzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3dlYi1jb21wYW5pb25zLy4vd3d3L3NyYy92aWV3cy9zaWRlbWVudS9zdHlsZXMvaW5zdW0tbWVudS1jYXRlZ29yeS5jc3M/ZDg2MiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfTk9fU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL25vU291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX05PX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIGAuaW5zdW0tbWVudS1jYXRlZ29yeSB7XG4gICAgdHJhbnNpdGlvbjogYWxsIDAuNHM7XG5cbiAgICAvKiAvLyBpbnB1dDpjaGVja2VkIHtcbiAgICAvLyAgIH4uaW5zdW0tbWVudS1jYXRlZ29yeV9fbGluayB7XG4gICAgLy8gICAgIGFuaW1hdGlvbjogbW92ZW91dCAwLjRzLCBoaWRlIDBzIGluZmluaXRlO2FuaW1hdGlvbmFuaW1hdGlvbmFuaW1hdGlvbmFuaW1hdGlvbmFuaW1hdGlvbmFuaW1hdGlvbmFuaW1hdGlvblxuICAgIC8vICAgICBhbmltYXRpb24tZGVsYXk6IDBzLCAwLjRzXG4gICAgLy9hbmltYXRpb24tZGVsYXlhbmltYXRpb24tZGVsYXlhbmltYXRpb24tZGVsYXlhbmltYXRpb24tZGVsYXlhbmltYXRpb24tZGVsYXlhbmltYXRpb24tZGVsYXlhbmltYXRpb24tZGVsYXkgICB9XG4gICAgLy8gfSAqL1xuICB9XG5cbiAgLmluc3VtLW1lbnUtY2F0ZWdvcnkgaW5wdXQge1xuICAgICAgZGlzcGxheTogbm9uZTtcbiAgICB9XG5cbiAgLmluc3VtLW1lbnUtY2F0ZWdvcnlfaGlkZSB7XG4gICAgbWF4LWhlaWdodDogMDtcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoLTUwcHgpO1xuICAgIG9wYWNpdHk6IDA7XG4gIH1cblxuICAuaW5zdW0tbWVudS1jYXRlZ29yeV9fdGl0bGUge1xuICAgIGRpc3BsYXk6IGJsb2NrOyBcbiAgICBoZWlnaHQ6IDQwcHg7XG4gICAgcGFkZGluZy1sZWZ0OiAxMHB4O1xuICAgIHVzZXItc2VsZWN0OiBub25lO1xuICAgIGxpbmUtaGVpZ2h0OiA0MHB4O1xuXG4gICAgLyogLy8gJjpob3ZlciB7XG4gICAgLy8gICBjdXJzb3I6IHBvaW50ZXI7Y3Vyc29yY3Vyc29yY3Vyc29yY3Vyc29yY3Vyc29yY3Vyc29yXG4gICAgLy8gfSAqL1xufVxuXG4uaW5zdW0tbWVudS1jYXRlZ29yeV9fbGluayB7XG4gICAgaGVpZ2h0OiAyNXB4O1xuICAgIG1heC1oZWlnaHQ6IDMwcHg7XG4gICAgcGFkZGluZy10b3A6IDEwcHg7XG4gICAgcGFkZGluZy1sZWZ0OiAzMHB4O1xuICAgIHVzZXItc2VsZWN0OiBub25lO1xuICAgIHRyYW5zaXRpb246IDAuNHMgYWxsO1xuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWCgwKTtcbiAgICBvcGFjaXR5OiAxO1xuICAgIGZvbnQtc2l6ZTogMTNweDtcbiAgfVxuXG4gIC5pbnN1bS1tZW51LWNhdGVnb3J5X19saW5rX2hpZGUge1xuICAgIG1heC1oZWlnaHQ6IDA7XG4gICAgbWFyZ2luOiAwO1xuICAgIHBhZGRpbmc6IDA7XG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKC01MHB4KTtcbiAgICBvcGFjaXR5OiAwO1xuICB9XG5cbiAgLmluc3VtLW1lbnUtY2F0ZWdvcnlfX2xpbmtfYWN0aXZlIHtcbiAgICBmb250LXNpemU6IG1lZGl1bTtcbiAgICBjb2xvcjogdmFyKC0taW5zdW0tc2lkZW1lbnVfX2ZvbnQtYWNjZW50LWNvbG9yKTtcbiAgfWAsIFwiXCJdKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///663\n')},747:(module,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(601);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(314);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `.insum-menu-search {\n  position: relative;\n  display: flex;\n}\n.insum-menu-search .insum-menu-search__icon {\n    position: absolute;\n    left: 10px;\n    width: 20px;\n    line-height: 40px;\n  }\n.insum-menu-search input {\n    width: calc(100% - 50px);\n    height: 40px;\n    padding: 0 10px 0 40px;\n    transition: 0.2s all;\n    color: var(--insum-sidemenu__font-accent-color);\n    border: none;\n    outline: none;\n    background: transparent;\n    font-size: 14px;\n  }\n.insum-menu-search input:focus {\n      border-bottom: 2px solid var(--insum-sidemenu__font-accent-color);\n    }\n`, ""]);\n// Exports\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzQ3LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2ViLWNvbXBhbmlvbnMvLi93d3cvc3JjL3ZpZXdzL3NpZGVtZW51L3N0eWxlcy9pbnN1bS1tZW51LXNlYXJjaC5jc3M/ZmIzNiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfTk9fU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL25vU291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX05PX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIGAuaW5zdW0tbWVudS1zZWFyY2gge1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIGRpc3BsYXk6IGZsZXg7XG59XG4uaW5zdW0tbWVudS1zZWFyY2ggLmluc3VtLW1lbnUtc2VhcmNoX19pY29uIHtcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgbGVmdDogMTBweDtcbiAgICB3aWR0aDogMjBweDtcbiAgICBsaW5lLWhlaWdodDogNDBweDtcbiAgfVxuLmluc3VtLW1lbnUtc2VhcmNoIGlucHV0IHtcbiAgICB3aWR0aDogY2FsYygxMDAlIC0gNTBweCk7XG4gICAgaGVpZ2h0OiA0MHB4O1xuICAgIHBhZGRpbmc6IDAgMTBweCAwIDQwcHg7XG4gICAgdHJhbnNpdGlvbjogMC4ycyBhbGw7XG4gICAgY29sb3I6IHZhcigtLWluc3VtLXNpZGVtZW51X19mb250LWFjY2VudC1jb2xvcik7XG4gICAgYm9yZGVyOiBub25lO1xuICAgIG91dGxpbmU6IG5vbmU7XG4gICAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XG4gICAgZm9udC1zaXplOiAxNHB4O1xuICB9XG4uaW5zdW0tbWVudS1zZWFyY2ggaW5wdXQ6Zm9jdXMge1xuICAgICAgYm9yZGVyLWJvdHRvbTogMnB4IHNvbGlkIHZhcigtLWluc3VtLXNpZGVtZW51X19mb250LWFjY2VudC1jb2xvcik7XG4gICAgfVxuYCwgXCJcIl0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///747\n')},304:(module,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(601);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(314);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `.insum-menu__title {\n  text-align: center;\n}\n\n.insum-menu-category__title_active {\n  color: var(--insum-sidemenu__font-accent-color);\n}\n\n.insum-menu__sidenav {\n  position: absolute;\n  top: 0;\n  left: 0;\n  display: flex;\n  flex-direction: column;\n  overflow-y: auto;\n  width: var(--insum-sidemenu__size_width);\n  height: 100%;\n  color: var(--insum-sidemenu__font-main-color);\n  border-radius: var(--insum-sidemenu__border-radius);\n  background: var(--insum-sidemenu__background-color);\n  box-shadow: var(--insum-sidemenu__box-shadow);\n  font-family: var(--insum-sidemenu__font-family);\n}\n`, ""]);\n// Exports\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzA0LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3dlYi1jb21wYW5pb25zLy4vd3d3L3NyYy92aWV3cy9zaWRlbWVudS9zdHlsZXMvaW5zdW0tbWVudS5jc3M/MjVhOCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfTk9fU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL25vU291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX05PX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIGAuaW5zdW0tbWVudV9fdGl0bGUge1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG59XG5cbi5pbnN1bS1tZW51LWNhdGVnb3J5X190aXRsZV9hY3RpdmUge1xuICBjb2xvcjogdmFyKC0taW5zdW0tc2lkZW1lbnVfX2ZvbnQtYWNjZW50LWNvbG9yKTtcbn1cblxuLmluc3VtLW1lbnVfX3NpZGVuYXYge1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIHRvcDogMDtcbiAgbGVmdDogMDtcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgb3ZlcmZsb3cteTogYXV0bztcbiAgd2lkdGg6IHZhcigtLWluc3VtLXNpZGVtZW51X19zaXplX3dpZHRoKTtcbiAgaGVpZ2h0OiAxMDAlO1xuICBjb2xvcjogdmFyKC0taW5zdW0tc2lkZW1lbnVfX2ZvbnQtbWFpbi1jb2xvcik7XG4gIGJvcmRlci1yYWRpdXM6IHZhcigtLWluc3VtLXNpZGVtZW51X19ib3JkZXItcmFkaXVzKTtcbiAgYmFja2dyb3VuZDogdmFyKC0taW5zdW0tc2lkZW1lbnVfX2JhY2tncm91bmQtY29sb3IpO1xuICBib3gtc2hhZG93OiB2YXIoLS1pbnN1bS1zaWRlbWVudV9fYm94LXNoYWRvdyk7XG4gIGZvbnQtZmFtaWx5OiB2YXIoLS1pbnN1bS1zaWRlbWVudV9fZm9udC1mYW1pbHkpO1xufVxuYCwgXCJcIl0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///304\n')},278:(module,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(601);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(314);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _node_modules_css_loader_dist_cjs_js_ruleSet_1_rules_2_use_0_node_modules_postcss_loader_dist_cjs_js_ruleSet_1_rules_2_use_1_insum_menu_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(304);\n/* harmony import */ var _node_modules_css_loader_dist_cjs_js_ruleSet_1_rules_2_use_0_node_modules_postcss_loader_dist_cjs_js_ruleSet_1_rules_2_use_1_insum_menu_search_css__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(747);\n/* harmony import */ var _node_modules_css_loader_dist_cjs_js_ruleSet_1_rules_2_use_0_node_modules_postcss_loader_dist_cjs_js_ruleSet_1_rules_2_use_1_insum_menu_category_css__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(663);\n// Imports\n\n\n\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n___CSS_LOADER_EXPORT___.i(_node_modules_css_loader_dist_cjs_js_ruleSet_1_rules_2_use_0_node_modules_postcss_loader_dist_cjs_js_ruleSet_1_rules_2_use_1_insum_menu_css__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .A);\n___CSS_LOADER_EXPORT___.i(_node_modules_css_loader_dist_cjs_js_ruleSet_1_rules_2_use_0_node_modules_postcss_loader_dist_cjs_js_ruleSet_1_rules_2_use_1_insum_menu_search_css__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .A);\n___CSS_LOADER_EXPORT___.i(_node_modules_css_loader_dist_cjs_js_ruleSet_1_rules_2_use_0_node_modules_postcss_loader_dist_cjs_js_ruleSet_1_rules_2_use_1_insum_menu_category_css__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .A);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `:host {\n    --insum-sidemenu__background-color: #222;\n    --insum-sidemenu__font-family: "Ubuntu", sans-serif;\n    --insum-sidemenu__font-main-color: #d9d9d9;\n    --insum-sidemenu__font-accent-color: #fff;\n    --insum-sidemenu__size_width: 200px;\n    --insum-sidemenu__border-radius: 0;\n    --insum-sidemenu__box-shadow: 0 2px 4px rgb(0 0 0 / 25%);\n}\n\n@keyframes moveout {\n  from {\n    transform: translateX(0);\n    opacity: 1;\n  }\n\n  to {\n    transform: translateX(-50px);\n    opacity: 0;\n  }\n}\n\n@keyframes movein {\n  from {\n    transform: translateX(-50px);\n    opacity: 0;\n  }\n\n  to {\n    transform: translateX(0);\n    opacity: 1;\n  }\n}\n\n@keyframes hide {\n  to,\n  from {\n    max-height: 0;\n    transform: translateX(-50px);\n    opacity: 0;\n  }\n}`, ""]);\n// Exports\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjc4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3dlYi1jb21wYW5pb25zLy4vd3d3L3NyYy92aWV3cy9zaWRlbWVudS9zdHlsZXMvc2lkZW1lbnUuY3NzP2IzM2UiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX05PX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9ub1NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FUX1JVTEVfSU1QT1JUXzBfX18gZnJvbSBcIi0hLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbMl0udXNlWzBdIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1syXS51c2VbMV0hLi9pbnN1bS1tZW51LmNzc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVRfUlVMRV9JTVBPUlRfMV9fXyBmcm9tIFwiLSEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1syXS51c2VbMF0hLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzJdLnVzZVsxXSEuL2luc3VtLW1lbnUtc2VhcmNoLmNzc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVRfUlVMRV9JTVBPUlRfMl9fXyBmcm9tIFwiLSEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1syXS51c2VbMF0hLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzJdLnVzZVsxXSEuL2luc3VtLW1lbnUtY2F0ZWdvcnkuY3NzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfTk9fU09VUkNFTUFQX0lNUE9SVF9fXyk7XG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5pKF9fX0NTU19MT0FERVJfQVRfUlVMRV9JTVBPUlRfMF9fXyk7XG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5pKF9fX0NTU19MT0FERVJfQVRfUlVMRV9JTVBPUlRfMV9fXyk7XG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5pKF9fX0NTU19MT0FERVJfQVRfUlVMRV9JTVBPUlRfMl9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgYDpob3N0IHtcbiAgICAtLWluc3VtLXNpZGVtZW51X19iYWNrZ3JvdW5kLWNvbG9yOiAjMjIyO1xuICAgIC0taW5zdW0tc2lkZW1lbnVfX2ZvbnQtZmFtaWx5OiBcIlVidW50dVwiLCBzYW5zLXNlcmlmO1xuICAgIC0taW5zdW0tc2lkZW1lbnVfX2ZvbnQtbWFpbi1jb2xvcjogI2Q5ZDlkOTtcbiAgICAtLWluc3VtLXNpZGVtZW51X19mb250LWFjY2VudC1jb2xvcjogI2ZmZjtcbiAgICAtLWluc3VtLXNpZGVtZW51X19zaXplX3dpZHRoOiAyMDBweDtcbiAgICAtLWluc3VtLXNpZGVtZW51X19ib3JkZXItcmFkaXVzOiAwO1xuICAgIC0taW5zdW0tc2lkZW1lbnVfX2JveC1zaGFkb3c6IDAgMnB4IDRweCByZ2IoMCAwIDAgLyAyNSUpO1xufVxuXG5Aa2V5ZnJhbWVzIG1vdmVvdXQge1xuICBmcm9tIHtcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoMCk7XG4gICAgb3BhY2l0eTogMTtcbiAgfVxuXG4gIHRvIHtcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoLTUwcHgpO1xuICAgIG9wYWNpdHk6IDA7XG4gIH1cbn1cblxuQGtleWZyYW1lcyBtb3ZlaW4ge1xuICBmcm9tIHtcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoLTUwcHgpO1xuICAgIG9wYWNpdHk6IDA7XG4gIH1cblxuICB0byB7XG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKDApO1xuICAgIG9wYWNpdHk6IDE7XG4gIH1cbn1cblxuQGtleWZyYW1lcyBoaWRlIHtcbiAgdG8sXG4gIGZyb20ge1xuICAgIG1heC1oZWlnaHQ6IDA7XG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKC01MHB4KTtcbiAgICBvcGFjaXR5OiAwO1xuICB9XG59YCwgXCJcIl0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///278\n')},314:module=>{eval('\n\n/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n*/\nmodule.exports = function (cssWithMappingToString) {\n  var list = [];\n\n  // return the list of modules as css string\n  list.toString = function toString() {\n    return this.map(function (item) {\n      var content = "";\n      var needLayer = typeof item[5] !== "undefined";\n      if (item[4]) {\n        content += "@supports (".concat(item[4], ") {");\n      }\n      if (item[2]) {\n        content += "@media ".concat(item[2], " {");\n      }\n      if (needLayer) {\n        content += "@layer".concat(item[5].length > 0 ? " ".concat(item[5]) : "", " {");\n      }\n      content += cssWithMappingToString(item);\n      if (needLayer) {\n        content += "}";\n      }\n      if (item[2]) {\n        content += "}";\n      }\n      if (item[4]) {\n        content += "}";\n      }\n      return content;\n    }).join("");\n  };\n\n  // import a list of modules into the list\n  list.i = function i(modules, media, dedupe, supports, layer) {\n    if (typeof modules === "string") {\n      modules = [[null, modules, undefined]];\n    }\n    var alreadyImportedModules = {};\n    if (dedupe) {\n      for (var k = 0; k < this.length; k++) {\n        var id = this[k][0];\n        if (id != null) {\n          alreadyImportedModules[id] = true;\n        }\n      }\n    }\n    for (var _k = 0; _k < modules.length; _k++) {\n      var item = [].concat(modules[_k]);\n      if (dedupe && alreadyImportedModules[item[0]]) {\n        continue;\n      }\n      if (typeof layer !== "undefined") {\n        if (typeof item[5] === "undefined") {\n          item[5] = layer;\n        } else {\n          item[1] = "@layer".concat(item[5].length > 0 ? " ".concat(item[5]) : "", " {").concat(item[1], "}");\n          item[5] = layer;\n        }\n      }\n      if (media) {\n        if (!item[2]) {\n          item[2] = media;\n        } else {\n          item[1] = "@media ".concat(item[2], " {").concat(item[1], "}");\n          item[2] = media;\n        }\n      }\n      if (supports) {\n        if (!item[4]) {\n          item[4] = "".concat(supports);\n        } else {\n          item[1] = "@supports (".concat(item[4], ") {").concat(item[1], "}");\n          item[4] = supports;\n        }\n      }\n      list.push(item);\n    }\n  };\n  return list;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzE0LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2ViLWNvbXBhbmlvbnMvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzPzI0ZmIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qXG4gIE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4gIEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKSB7XG4gIHZhciBsaXN0ID0gW107XG5cbiAgLy8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuICBsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICB2YXIgY29udGVudCA9IFwiXCI7XG4gICAgICB2YXIgbmVlZExheWVyID0gdHlwZW9mIGl0ZW1bNV0gIT09IFwidW5kZWZpbmVkXCI7XG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIik7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpO1xuICAgICAgfVxuICAgICAgaWYgKG5lZWRMYXllcikge1xuICAgICAgICBjb250ZW50ICs9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIik7XG4gICAgICB9XG4gICAgICBjb250ZW50ICs9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSk7XG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjb250ZW50O1xuICAgIH0pLmpvaW4oXCJcIik7XG4gIH07XG5cbiAgLy8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcbiAgbGlzdC5pID0gZnVuY3Rpb24gaShtb2R1bGVzLCBtZWRpYSwgZGVkdXBlLCBzdXBwb3J0cywgbGF5ZXIpIHtcbiAgICBpZiAodHlwZW9mIG1vZHVsZXMgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsIHVuZGVmaW5lZF1dO1xuICAgIH1cbiAgICB2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xuICAgIGlmIChkZWR1cGUpIHtcbiAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgdGhpcy5sZW5ndGg7IGsrKykge1xuICAgICAgICB2YXIgaWQgPSB0aGlzW2tdWzBdO1xuICAgICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICAgIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBmb3IgKHZhciBfayA9IDA7IF9rIDwgbW9kdWxlcy5sZW5ndGg7IF9rKyspIHtcbiAgICAgIHZhciBpdGVtID0gW10uY29uY2F0KG1vZHVsZXNbX2tdKTtcbiAgICAgIGlmIChkZWR1cGUgJiYgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgbGF5ZXIgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBpdGVtWzVdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAobWVkaWEpIHtcbiAgICAgICAgaWYgKCFpdGVtWzJdKSB7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHN1cHBvcnRzKSB7XG4gICAgICAgIGlmICghaXRlbVs0XSkge1xuICAgICAgICAgIGl0ZW1bNF0gPSBcIlwiLmNvbmNhdChzdXBwb3J0cyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzRdID0gc3VwcG9ydHM7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGxpc3QucHVzaChpdGVtKTtcbiAgICB9XG4gIH07XG4gIHJldHVybiBsaXN0O1xufTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///314\n')},417:module=>{eval('\n\nmodule.exports = function (url, options) {\n  if (!options) {\n    options = {};\n  }\n  if (!url) {\n    return url;\n  }\n  url = String(url.__esModule ? url.default : url);\n\n  // If url is already wrapped in quotes, remove them\n  if (/^[\'"].*[\'"]$/.test(url)) {\n    url = url.slice(1, -1);\n  }\n  if (options.hash) {\n    url += options.hash;\n  }\n\n  // Should url be wrapped?\n  // See https://drafts.csswg.org/css-values-3/#urls\n  if (/["\'() \\t\\n]|(%20)/.test(url) || options.needQuotes) {\n    return "\\"".concat(url.replace(/"/g, \'\\\\"\').replace(/\\n/g, "\\\\n"), "\\"");\n  }\n  return url;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDE3LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93ZWItY29tcGFuaW9ucy8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9nZXRVcmwuanM/MWRlNSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodXJsLCBvcHRpb25zKSB7XG4gIGlmICghb3B0aW9ucykge1xuICAgIG9wdGlvbnMgPSB7fTtcbiAgfVxuICBpZiAoIXVybCkge1xuICAgIHJldHVybiB1cmw7XG4gIH1cbiAgdXJsID0gU3RyaW5nKHVybC5fX2VzTW9kdWxlID8gdXJsLmRlZmF1bHQgOiB1cmwpO1xuXG4gIC8vIElmIHVybCBpcyBhbHJlYWR5IHdyYXBwZWQgaW4gcXVvdGVzLCByZW1vdmUgdGhlbVxuICBpZiAoL15bJ1wiXS4qWydcIl0kLy50ZXN0KHVybCkpIHtcbiAgICB1cmwgPSB1cmwuc2xpY2UoMSwgLTEpO1xuICB9XG4gIGlmIChvcHRpb25zLmhhc2gpIHtcbiAgICB1cmwgKz0gb3B0aW9ucy5oYXNoO1xuICB9XG5cbiAgLy8gU2hvdWxkIHVybCBiZSB3cmFwcGVkP1xuICAvLyBTZWUgaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzcy12YWx1ZXMtMy8jdXJsc1xuICBpZiAoL1tcIicoKSBcXHRcXG5dfCglMjApLy50ZXN0KHVybCkgfHwgb3B0aW9ucy5uZWVkUXVvdGVzKSB7XG4gICAgcmV0dXJuIFwiXFxcIlwiLmNvbmNhdCh1cmwucmVwbGFjZSgvXCIvZywgJ1xcXFxcIicpLnJlcGxhY2UoL1xcbi9nLCBcIlxcXFxuXCIpLCBcIlxcXCJcIik7XG4gIH1cbiAgcmV0dXJuIHVybDtcbn07Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///417\n')},601:module=>{eval("\n\nmodule.exports = function (i) {\n  return i[1];\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjAxLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93ZWItY29tcGFuaW9ucy8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9ub1NvdXJjZU1hcHMuanM/MjdjOCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaSkge1xuICByZXR1cm4gaVsxXTtcbn07Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///601\n")},897:(e,t,n)=>{e.exports=n.p+"e14d84ccec6be3ff19e3.ttf"}},__webpack_module_cache__={};function __webpack_require__(e){var t=__webpack_module_cache__[e];if(void 0!==t)return t.exports;var n=__webpack_module_cache__[e]={id:e,exports:{}};return __webpack_modules__[e](n,n.exports,__webpack_require__),n.exports}__webpack_require__.m=__webpack_modules__,__webpack_require__.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return __webpack_require__.d(t,{a:t}),t},__webpack_require__.d=(e,t)=>{for(var n in t)__webpack_require__.o(t,n)&&!__webpack_require__.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},__webpack_require__.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),__webpack_require__.p="",__webpack_require__.b=document.baseURI||self.location.href;var __webpack_exports__=__webpack_require__(216)})();